
Dozameter.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000262  00800100  00001022  000010b6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001022  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000042  00800362  00800362  00001318  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001318  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001348  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000140  00000000  00000000  00001384  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001d57  00000000  00000000  000014c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000c5f  00000000  00000000  0000321b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000d41  00000000  00000000  00003e7a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002cc  00000000  00000000  00004bbc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000063e  00000000  00000000  00004e88  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000fed  00000000  00000000  000054c6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000f0  00000000  00000000  000064b3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	19 c0       	rjmp	.+50     	; 0x34 <__ctors_end>
       2:	33 c0       	rjmp	.+102    	; 0x6a <__bad_interrupt>
       4:	32 c0       	rjmp	.+100    	; 0x6a <__bad_interrupt>
       6:	31 c0       	rjmp	.+98     	; 0x6a <__bad_interrupt>
       8:	30 c0       	rjmp	.+96     	; 0x6a <__bad_interrupt>
       a:	2f c0       	rjmp	.+94     	; 0x6a <__bad_interrupt>
       c:	2e c0       	rjmp	.+92     	; 0x6a <__bad_interrupt>
       e:	2d c0       	rjmp	.+90     	; 0x6a <__bad_interrupt>
      10:	2c c0       	rjmp	.+88     	; 0x6a <__bad_interrupt>
      12:	2b c0       	rjmp	.+86     	; 0x6a <__bad_interrupt>
      14:	2a c0       	rjmp	.+84     	; 0x6a <__bad_interrupt>
      16:	b3 c2       	rjmp	.+1382   	; 0x57e <__vector_11>
      18:	28 c0       	rjmp	.+80     	; 0x6a <__bad_interrupt>
      1a:	27 c0       	rjmp	.+78     	; 0x6a <__bad_interrupt>
      1c:	26 c0       	rjmp	.+76     	; 0x6a <__bad_interrupt>
      1e:	25 c0       	rjmp	.+74     	; 0x6a <__bad_interrupt>
      20:	24 c0       	rjmp	.+72     	; 0x6a <__bad_interrupt>
      22:	23 c0       	rjmp	.+70     	; 0x6a <__bad_interrupt>
      24:	22 c0       	rjmp	.+68     	; 0x6a <__bad_interrupt>
      26:	21 c0       	rjmp	.+66     	; 0x6a <__bad_interrupt>
      28:	20 c0       	rjmp	.+64     	; 0x6a <__bad_interrupt>
      2a:	1f c0       	rjmp	.+62     	; 0x6a <__bad_interrupt>
      2c:	1e c0       	rjmp	.+60     	; 0x6a <__bad_interrupt>
      2e:	1d c0       	rjmp	.+58     	; 0x6a <__bad_interrupt>
      30:	1c c0       	rjmp	.+56     	; 0x6a <__bad_interrupt>
      32:	1b c0       	rjmp	.+54     	; 0x6a <__bad_interrupt>

00000034 <__ctors_end>:
      34:	11 24       	eor	r1, r1
      36:	1f be       	out	0x3f, r1	; 63
      38:	cf ef       	ldi	r28, 0xFF	; 255
      3a:	d4 e0       	ldi	r29, 0x04	; 4
      3c:	de bf       	out	0x3e, r29	; 62
      3e:	cd bf       	out	0x3d, r28	; 61

00000040 <__do_copy_data>:
      40:	13 e0       	ldi	r17, 0x03	; 3
      42:	a0 e0       	ldi	r26, 0x00	; 0
      44:	b1 e0       	ldi	r27, 0x01	; 1
      46:	e2 e2       	ldi	r30, 0x22	; 34
      48:	f0 e1       	ldi	r31, 0x10	; 16
      4a:	02 c0       	rjmp	.+4      	; 0x50 <__do_copy_data+0x10>
      4c:	05 90       	lpm	r0, Z+
      4e:	0d 92       	st	X+, r0
      50:	a2 36       	cpi	r26, 0x62	; 98
      52:	b1 07       	cpc	r27, r17
      54:	d9 f7       	brne	.-10     	; 0x4c <__do_copy_data+0xc>

00000056 <__do_clear_bss>:
      56:	23 e0       	ldi	r18, 0x03	; 3
      58:	a2 e6       	ldi	r26, 0x62	; 98
      5a:	b3 e0       	ldi	r27, 0x03	; 3
      5c:	01 c0       	rjmp	.+2      	; 0x60 <.do_clear_bss_start>

0000005e <.do_clear_bss_loop>:
      5e:	1d 92       	st	X+, r1

00000060 <.do_clear_bss_start>:
      60:	a4 3a       	cpi	r26, 0xA4	; 164
      62:	b2 07       	cpc	r27, r18
      64:	e1 f7       	brne	.-8      	; 0x5e <.do_clear_bss_loop>
      66:	a2 d2       	rcall	.+1348   	; 0x5ac <main>
      68:	da c7       	rjmp	.+4020   	; 0x101e <_exit>

0000006a <__bad_interrupt>:
      6a:	ca cf       	rjmp	.-108    	; 0x0 <__vectors>

0000006c <adc_device>:
#include <util/delay.h>


unsigned int adc_device(unsigned char ADC_channel) // когда вызываем, то в скобочках указываем номер канала АЦП, чтобы мерить на нескольких
{
	ADMUX = ADC_channel | (ADMUX & 0xF0); // устанавливаем канал, при этом сбрасываем все значения установки каналов, не задевая тругие регистры
      6c:	ec e7       	ldi	r30, 0x7C	; 124
      6e:	f0 e0       	ldi	r31, 0x00	; 0
      70:	90 81       	ld	r25, Z
      72:	90 7f       	andi	r25, 0xF0	; 240
      74:	89 2b       	or	r24, r25
      76:	80 83       	st	Z, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
      78:	8a e1       	ldi	r24, 0x1A	; 26
      7a:	8a 95       	dec	r24
      7c:	f1 f7       	brne	.-4      	; 0x7a <adc_device+0xe>
      7e:	00 c0       	rjmp	.+0      	; 0x80 <adc_device+0x14>
	
	//задержка для стабилизации входного напряжения
	_delay_us(10);
	
	//начинаем преобразование (ADSC = 1)
	ADCSRA |= (1 << ADSC);
      80:	ea e7       	ldi	r30, 0x7A	; 122
      82:	f0 e0       	ldi	r31, 0x00	; 0
      84:	80 81       	ld	r24, Z
      86:	80 64       	ori	r24, 0x40	; 64
      88:	80 83       	st	Z, r24
	while((ADCSRA & (1 << ADIF)) == 0 ); //ждем, пока АЦП закончит преобразование (ADIF = 0)
      8a:	80 81       	ld	r24, Z
      8c:	84 ff       	sbrs	r24, 4
      8e:	fd cf       	rjmp	.-6      	; 0x8a <adc_device+0x1e>
	ADCSRA |= (1 << ADIF); //устанавливаем ADIF
      90:	ea e7       	ldi	r30, 0x7A	; 122
      92:	f0 e0       	ldi	r31, 0x00	; 0
      94:	80 81       	ld	r24, Z
      96:	80 61       	ori	r24, 0x10	; 16
      98:	80 83       	st	Z, r24
	return ADCW; //ADCW - содержит ADCH и ADCL
      9a:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__DATA_REGION_ORIGIN__+0x18>
      9e:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__DATA_REGION_ORIGIN__+0x19>
}
      a2:	08 95       	ret

000000a4 <init_adc>:

void init_adc(void)
{
	PORTC = 0b00000000; // порты
      a4:	18 b8       	out	0x08, r1	; 8
	DDRC = 0b00000000; // порты
      a6:	17 b8       	out	0x07, r1	; 7
	
	// ADC
	ADMUX |= ((0 << REFS1) | (1 << REFS0) | (0 << ADLAR) | (0 << MUX3) | (0 << MUX2) | (0 << MUX1) | (0 << MUX0));
      a8:	ec e7       	ldi	r30, 0x7C	; 124
      aa:	f0 e0       	ldi	r31, 0x00	; 0
      ac:	80 81       	ld	r24, Z
      ae:	80 64       	ori	r24, 0x40	; 64
      b0:	80 83       	st	Z, r24
	ADCSRA |= ((1 << ADEN) | (0 << ADSC) | (0 << ADATE) | (0 << ADIF) | (0 << ADIE) | (1 << ADPS2) | (0 << ADPS1) | (1 << ADPS0));
      b2:	ea e7       	ldi	r30, 0x7A	; 122
      b4:	f0 e0       	ldi	r31, 0x00	; 0
      b6:	80 81       	ld	r24, Z
      b8:	85 68       	ori	r24, 0x85	; 133
      ba:	80 83       	st	Z, r24
      bc:	08 95       	ret

000000be <I2C_Init>:
}


void I2C_StopCondition(void)
{
	TWCR = (1<<TWINT)|(1<<TWSTO)|(1<<TWEN);
      be:	80 e2       	ldi	r24, 0x20	; 32
      c0:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__DATA_REGION_ORIGIN__+0x58>
      c4:	08 95       	ret

000000c6 <I2C_StartCondition>:
      c6:	84 ea       	ldi	r24, 0xA4	; 164
      c8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
      cc:	ec eb       	ldi	r30, 0xBC	; 188
      ce:	f0 e0       	ldi	r31, 0x00	; 0
      d0:	80 81       	ld	r24, Z
      d2:	88 23       	and	r24, r24
      d4:	ec f7       	brge	.-6      	; 0xd0 <I2C_StartCondition+0xa>
      d6:	08 95       	ret

000000d8 <I2C_SendByte>:
}

void I2C_SendByte(unsigned char c)
{
	TWDR = c;//запишем байт в регистр данных
      d8:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
	TWCR = (1<<TWINT)|(1<<TWEN);//включим передачу байта
      dc:	84 e8       	ldi	r24, 0x84	; 132
      de:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
	while (!(TWCR & (1<<TWINT)));//подождем пока установится TWIN
      e2:	ec eb       	ldi	r30, 0xBC	; 188
      e4:	f0 e0       	ldi	r31, 0x00	; 0
      e6:	80 81       	ld	r24, Z
      e8:	88 23       	and	r24, r24
      ea:	ec f7       	brge	.-6      	; 0xe6 <I2C_SendByte+0xe>
}
      ec:	08 95       	ret

000000ee <I2C_ReceiveByte>:


unsigned char I2C_ReceiveByte(void)
{
	err1 = 0;
      ee:	10 92 62 03 	sts	0x0362, r1	; 0x800362 <__data_end>
	TWCR = (1<<TWINT)|(1<<TWEN);//включим прием данных
      f2:	84 e8       	ldi	r24, 0x84	; 132
      f4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
	while(!(TWCR & (1<<TWINT)));//подождем пока установится TWIN
      f8:	ec eb       	ldi	r30, 0xBC	; 188
      fa:	f0 e0       	ldi	r31, 0x00	; 0
      fc:	80 81       	ld	r24, Z
      fe:	88 23       	and	r24, r24
     100:	ec f7       	brge	.-6      	; 0xfc <I2C_ReceiveByte+0xe>
	if ((TWSR & 0xF8) != TW_MR_DATA_NACK) err1 = 1;
     102:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__DATA_REGION_ORIGIN__+0x59>
     106:	88 7f       	andi	r24, 0xF8	; 248
     108:	88 35       	cpi	r24, 0x58	; 88
     10a:	21 f0       	breq	.+8      	; 0x114 <I2C_ReceiveByte+0x26>
     10c:	81 e0       	ldi	r24, 0x01	; 1
     10e:	80 93 62 03 	sts	0x0362, r24	; 0x800362 <__data_end>
     112:	02 c0       	rjmp	.+4      	; 0x118 <I2C_ReceiveByte+0x2a>
	else err1 = 0;
     114:	10 92 62 03 	sts	0x0362, r1	; 0x800362 <__data_end>
	return TWDR;
     118:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
}
     11c:	08 95       	ret

0000011e <I2C_write>:


void I2C_write(uint8_t data, uint8_t address) // записываем данные в указанный регистр
{
     11e:	cf 93       	push	r28
     120:	df 93       	push	r29
     122:	c8 2f       	mov	r28, r24
     124:	d6 2f       	mov	r29, r22
	I2C_StartCondition(); //Отправим условие START
     126:	cf df       	rcall	.-98     	; 0xc6 <I2C_StartCondition>
	I2C_SendByte(ADDR_W); //передаем адрес и бит записи (0)
     128:	8e ee       	ldi	r24, 0xEE	; 238
     12a:	d6 df       	rcall	.-84     	; 0xd8 <I2C_SendByte>
	I2C_SendByte(address);//переходим на 0x0000 — старший байт адреса памяти
     12c:	8d 2f       	mov	r24, r29
     12e:	d4 df       	rcall	.-88     	; 0xd8 <I2C_SendByte>
	I2C_SendByte(data); // — младший байт адреса памяти
     130:	8c 2f       	mov	r24, r28
     132:	d2 df       	rcall	.-92     	; 0xd8 <I2C_SendByte>
}


void I2C_StopCondition(void)
{
	TWCR = (1<<TWINT)|(1<<TWSTO)|(1<<TWEN);
     134:	84 e9       	ldi	r24, 0x94	; 148
     136:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
	I2C_StartCondition(); //Отправим условие START
	I2C_SendByte(ADDR_W); //передаем адрес и бит записи (0)
	I2C_SendByte(address);//переходим на 0x0000 — старший байт адреса памяти
	I2C_SendByte(data); // — младший байт адреса памяти
	I2C_StopCondition(); //Отправим условие STOP
}
     13a:	df 91       	pop	r29
     13c:	cf 91       	pop	r28
     13e:	08 95       	ret

00000140 <I2C_read>:


uint8_t I2C_read(uint8_t address)
{
     140:	cf 93       	push	r28
     142:	c8 2f       	mov	r28, r24
	uint8_t data;
	I2C_StartCondition(); //Отправим условие START
     144:	c0 df       	rcall	.-128    	; 0xc6 <I2C_StartCondition>
	I2C_SendByte(ADDR_W);//передаем адрес устройства и бит записи (0)
     146:	8e ee       	ldi	r24, 0xEE	; 238
     148:	c7 df       	rcall	.-114    	; 0xd8 <I2C_SendByte>
	I2C_SendByte(address);//передаем адрес регистра
     14a:	8c 2f       	mov	r24, r28
     14c:	c5 df       	rcall	.-118    	; 0xd8 <I2C_SendByte>
	I2C_StartCondition(); //Отправим условие START
     14e:	bb df       	rcall	.-138    	; 0xc6 <I2C_StartCondition>
	I2C_SendByte(ADDR_R);//передаем адрес устройства и бит чтения (1)
     150:	8f ee       	ldi	r24, 0xEF	; 239
     152:	c2 df       	rcall	.-124    	; 0xd8 <I2C_SendByte>
	data = I2C_ReceiveByte();
     154:	cc df       	rcall	.-104    	; 0xee <I2C_ReceiveByte>
}


void I2C_StopCondition(void)
{
	TWCR = (1<<TWINT)|(1<<TWSTO)|(1<<TWEN);
     156:	94 e9       	ldi	r25, 0x94	; 148
     158:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
	I2C_StartCondition(); //Отправим условие START
	I2C_SendByte(ADDR_R);//передаем адрес устройства и бит чтения (1)
	data = I2C_ReceiveByte();
	I2C_StopCondition(); //Отправим условие STOP
	return data;
}
     15c:	cf 91       	pop	r28
     15e:	08 95       	ret

00000160 <Temp>:
	MD = (I2C_read(0xBE) << 8) + I2C_read(0xBF);
}


float Temp(void)
{
     160:	cf 92       	push	r12
     162:	df 92       	push	r13
     164:	ef 92       	push	r14
     166:	ff 92       	push	r15
     168:	0f 93       	push	r16
     16a:	1f 93       	push	r17
	//Начинаем читать температуру записывая данные в регистр 0xF4
	I2C_write(0x2E, 0xF4); // записали 0x2E в регистр 0xF4 и получаем температуру
     16c:	64 ef       	ldi	r22, 0xF4	; 244
     16e:	8e e2       	ldi	r24, 0x2E	; 46
     170:	d6 df       	rcall	.-84     	; 0x11e <I2C_write>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     172:	8f e0       	ldi	r24, 0x0F	; 15
     174:	97 e2       	ldi	r25, 0x27	; 39
     176:	01 97       	sbiw	r24, 0x01	; 1
     178:	f1 f7       	brne	.-4      	; 0x176 <Temp+0x16>
     17a:	00 c0       	rjmp	.+0      	; 0x17c <Temp+0x1c>
     17c:	00 00       	nop
	_delay_ms(5); 	//Задержка 4.5 мс
	long UT = (I2C_read(0xF6) << 8) + I2C_read(0xF7); 	//Считываем значения температуры
     17e:	86 ef       	ldi	r24, 0xF6	; 246
     180:	df df       	rcall	.-66     	; 0x140 <I2C_read>
     182:	f8 2e       	mov	r15, r24
     184:	87 ef       	ldi	r24, 0xF7	; 247
     186:	dc df       	rcall	.-72     	; 0x140 <I2C_read>
	long X1 = ((UT - AC6)*AC5) >> 15;
     188:	2f 2d       	mov	r18, r15
     18a:	30 e0       	ldi	r19, 0x00	; 0
     18c:	32 2f       	mov	r19, r18
     18e:	22 27       	eor	r18, r18
     190:	28 0f       	add	r18, r24
     192:	31 1d       	adc	r19, r1
     194:	a9 01       	movw	r20, r18
     196:	33 0f       	add	r19, r19
     198:	66 0b       	sbc	r22, r22
     19a:	77 0b       	sbc	r23, r23
     19c:	80 91 72 03 	lds	r24, 0x0372	; 0x800372 <AC6>
     1a0:	90 91 73 03 	lds	r25, 0x0373	; 0x800373 <AC6+0x1>
     1a4:	9a 01       	movw	r18, r20
     1a6:	ab 01       	movw	r20, r22
     1a8:	28 1b       	sub	r18, r24
     1aa:	39 0b       	sbc	r19, r25
     1ac:	41 09       	sbc	r20, r1
     1ae:	51 09       	sbc	r21, r1
     1b0:	a0 91 78 03 	lds	r26, 0x0378	; 0x800378 <AC5>
     1b4:	b0 91 79 03 	lds	r27, 0x0379	; 0x800379 <AC5+0x1>
     1b8:	22 d7       	rcall	.+3652   	; 0xffe <__muluhisi3>
     1ba:	6b 01       	movw	r12, r22
     1bc:	7c 01       	movw	r14, r24
     1be:	0b 2e       	mov	r0, r27
     1c0:	bf e0       	ldi	r27, 0x0F	; 15
     1c2:	f5 94       	asr	r15
     1c4:	e7 94       	ror	r14
     1c6:	d7 94       	ror	r13
     1c8:	c7 94       	ror	r12
     1ca:	ba 95       	dec	r27
     1cc:	d1 f7       	brne	.-12     	; 0x1c2 <Temp+0x62>
     1ce:	b0 2d       	mov	r27, r0
	long X2 = ((MC << 11)/(X1 + MD));
	B5 = X1 + X2;
     1d0:	80 91 9d 03 	lds	r24, 0x039D	; 0x80039d <MC>
     1d4:	60 e0       	ldi	r22, 0x00	; 0
     1d6:	70 e0       	ldi	r23, 0x00	; 0
     1d8:	78 2f       	mov	r23, r24
     1da:	77 0f       	add	r23, r23
     1dc:	77 0f       	add	r23, r23
     1de:	77 0f       	add	r23, r23
     1e0:	07 2e       	mov	r0, r23
     1e2:	00 0c       	add	r0, r0
     1e4:	88 0b       	sbc	r24, r24
     1e6:	99 0b       	sbc	r25, r25
     1e8:	20 91 6e 03 	lds	r18, 0x036E	; 0x80036e <MD>
     1ec:	30 91 6f 03 	lds	r19, 0x036F	; 0x80036f <MD+0x1>
     1f0:	89 01       	movw	r16, r18
     1f2:	33 0f       	add	r19, r19
     1f4:	22 0b       	sbc	r18, r18
     1f6:	33 0b       	sbc	r19, r19
     1f8:	a9 01       	movw	r20, r18
     1fa:	98 01       	movw	r18, r16
     1fc:	2c 0d       	add	r18, r12
     1fe:	3d 1d       	adc	r19, r13
     200:	4e 1d       	adc	r20, r14
     202:	5f 1d       	adc	r21, r15
     204:	d4 d6       	rcall	.+3496   	; 0xfae <__divmodsi4>
     206:	c2 0e       	add	r12, r18
     208:	d3 1e       	adc	r13, r19
     20a:	e4 1e       	adc	r14, r20
     20c:	f5 1e       	adc	r15, r21
     20e:	c0 92 7c 03 	sts	0x037C, r12	; 0x80037c <B5>
     212:	d0 92 7d 03 	sts	0x037D, r13	; 0x80037d <B5+0x1>
     216:	e0 92 7e 03 	sts	0x037E, r14	; 0x80037e <B5+0x2>
     21a:	f0 92 7f 03 	sts	0x037F, r15	; 0x80037f <B5+0x3>
	long T = (B5 + 8) >> 4;
	//T = (float)T / 10;
	return T;
     21e:	98 e0       	ldi	r25, 0x08	; 8
     220:	c9 0e       	add	r12, r25
     222:	d1 1c       	adc	r13, r1
     224:	e1 1c       	adc	r14, r1
     226:	f1 1c       	adc	r15, r1
     228:	c7 01       	movw	r24, r14
     22a:	b6 01       	movw	r22, r12
     22c:	68 94       	set
     22e:	13 f8       	bld	r1, 3
     230:	95 95       	asr	r25
     232:	87 95       	ror	r24
     234:	77 95       	ror	r23
     236:	67 95       	ror	r22
     238:	16 94       	lsr	r1
     23a:	d1 f7       	brne	.-12     	; 0x230 <Temp+0xd0>
     23c:	3c d5       	rcall	.+2680   	; 0xcb6 <__floatsisf>
}
     23e:	1f 91       	pop	r17
     240:	0f 91       	pop	r16
     242:	ff 90       	pop	r15
     244:	ef 90       	pop	r14
     246:	df 90       	pop	r13
     248:	cf 90       	pop	r12
     24a:	08 95       	ret

0000024c <Press>:

long Press(void)
{
     24c:	4f 92       	push	r4
     24e:	5f 92       	push	r5
     250:	6f 92       	push	r6
     252:	7f 92       	push	r7
     254:	8f 92       	push	r8
     256:	9f 92       	push	r9
     258:	af 92       	push	r10
     25a:	bf 92       	push	r11
     25c:	cf 92       	push	r12
     25e:	df 92       	push	r13
     260:	ef 92       	push	r14
     262:	ff 92       	push	r15
     264:	cf 93       	push	r28
     266:	df 93       	push	r29
     268:	00 d0       	rcall	.+0      	; 0x26a <Press+0x1e>
     26a:	00 d0       	rcall	.+0      	; 0x26c <Press+0x20>
     26c:	cd b7       	in	r28, 0x3d	; 61
     26e:	de b7       	in	r29, 0x3e	; 62
	//Начинаем читать давление записывая данные в регистр 0xF4
	I2C_write(0x34 + (oss << 6), 0xF4); // записали 0xB4 в регистр 0xF4 и получаем давление с двойной дискретизацией
     270:	64 ef       	ldi	r22, 0xF4	; 244
     272:	84 e7       	ldi	r24, 0x74	; 116
     274:	54 df       	rcall	.-344    	; 0x11e <I2C_write>
     276:	8f e7       	ldi	r24, 0x7F	; 127
     278:	9e e3       	ldi	r25, 0x3E	; 62
     27a:	01 97       	sbiw	r24, 0x01	; 1
     27c:	f1 f7       	brne	.-4      	; 0x27a <Press+0x2e>
     27e:	00 c0       	rjmp	.+0      	; 0x280 <Press+0x34>
     280:	00 00       	nop
	_delay_ms(8); 	//Задержка 8 мс, так повысили точность измерения
	long U = (I2C_read(0xF6) << 8);
     282:	86 ef       	ldi	r24, 0xF6	; 246
     284:	5d df       	rcall	.-326    	; 0x140 <I2C_read>
     286:	c8 2e       	mov	r12, r24
	long UP = ((U << 8) + (I2C_read(0xF7) << 8) + I2C_read(0xF8)) >> (8 - oss); 	//Считываем значения давления
     288:	87 ef       	ldi	r24, 0xF7	; 247
     28a:	5a df       	rcall	.-332    	; 0x140 <I2C_read>
     28c:	d1 2c       	mov	r13, r1
     28e:	dc 2c       	mov	r13, r12
     290:	cc 24       	eor	r12, r12
     292:	0d 2c       	mov	r0, r13
     294:	00 0c       	add	r0, r0
     296:	ee 08       	sbc	r14, r14
     298:	ff 08       	sbc	r15, r15
     29a:	7e 2d       	mov	r23, r14
     29c:	6d 2d       	mov	r22, r13
     29e:	5c 2d       	mov	r21, r12
     2a0:	44 27       	eor	r20, r20
     2a2:	c8 2e       	mov	r12, r24
     2a4:	d1 2c       	mov	r13, r1
     2a6:	dc 2c       	mov	r13, r12
     2a8:	cc 24       	eor	r12, r12
     2aa:	0d 2c       	mov	r0, r13
     2ac:	00 0c       	add	r0, r0
     2ae:	ee 08       	sbc	r14, r14
     2b0:	ff 08       	sbc	r15, r15
     2b2:	c4 0e       	add	r12, r20
     2b4:	d5 1e       	adc	r13, r21
     2b6:	e6 1e       	adc	r14, r22
     2b8:	f7 1e       	adc	r15, r23
     2ba:	88 ef       	ldi	r24, 0xF8	; 248
     2bc:	41 df       	rcall	.-382    	; 0x140 <I2C_read>
     2be:	e8 2f       	mov	r30, r24
	long B6 = B5 - 4000;
     2c0:	40 90 7c 03 	lds	r4, 0x037C	; 0x80037c <B5>
     2c4:	50 90 7d 03 	lds	r5, 0x037D	; 0x80037d <B5+0x1>
     2c8:	60 90 7e 03 	lds	r6, 0x037E	; 0x80037e <B5+0x2>
     2cc:	70 90 7f 03 	lds	r7, 0x037F	; 0x80037f <B5+0x3>
     2d0:	90 ea       	ldi	r25, 0xA0	; 160
     2d2:	49 1a       	sub	r4, r25
     2d4:	9f e0       	ldi	r25, 0x0F	; 15
     2d6:	59 0a       	sbc	r5, r25
     2d8:	61 08       	sbc	r6, r1
     2da:	71 08       	sbc	r7, r1
	X1 = (B2 * ((B6 * B6) >> 12)) >> 11;
     2dc:	a3 01       	movw	r20, r6
     2de:	92 01       	movw	r18, r4
     2e0:	c3 01       	movw	r24, r6
     2e2:	b2 01       	movw	r22, r4
     2e4:	33 d6       	rcall	.+3174   	; 0xf4c <__mulsi3>
     2e6:	9b 01       	movw	r18, r22
     2e8:	ac 01       	movw	r20, r24
     2ea:	01 2e       	mov	r0, r17
     2ec:	1c e0       	ldi	r17, 0x0C	; 12
     2ee:	55 95       	asr	r21
     2f0:	47 95       	ror	r20
     2f2:	37 95       	ror	r19
     2f4:	27 95       	ror	r18
     2f6:	1a 95       	dec	r17
     2f8:	d1 f7       	brne	.-12     	; 0x2ee <Press+0xa2>
     2fa:	10 2d       	mov	r17, r0
     2fc:	29 83       	std	Y+1, r18	; 0x01
     2fe:	3a 83       	std	Y+2, r19	; 0x02
     300:	4b 83       	std	Y+3, r20	; 0x03
     302:	5c 83       	std	Y+4, r21	; 0x04
	X2 = (AC2 * B6) >> 11;
	X3 = X1 + X2;
	long B3 = (((AC1 * 4 + X3) << oss) + 2) >> 2;
     304:	a0 91 8c 03 	lds	r26, 0x038C	; 0x80038c <B2>
     308:	b0 91 8d 03 	lds	r27, 0x038D	; 0x80038d <B2+0x1>
     30c:	82 d6       	rcall	.+3332   	; 0x1012 <__mulshisi3>
     30e:	4b 01       	movw	r8, r22
     310:	5c 01       	movw	r10, r24
     312:	07 2e       	mov	r0, r23
     314:	7b e0       	ldi	r23, 0x0B	; 11
     316:	b5 94       	asr	r11
     318:	a7 94       	ror	r10
     31a:	97 94       	ror	r9
     31c:	87 94       	ror	r8
     31e:	7a 95       	dec	r23
     320:	d1 f7       	brne	.-12     	; 0x316 <Press+0xca>
     322:	70 2d       	mov	r23, r0
     324:	a0 91 88 03 	lds	r26, 0x0388	; 0x800388 <AC2>
     328:	b0 91 89 03 	lds	r27, 0x0389	; 0x800389 <AC2+0x1>
     32c:	a3 01       	movw	r20, r6
     32e:	92 01       	movw	r18, r4
     330:	70 d6       	rcall	.+3296   	; 0x1012 <__mulshisi3>
     332:	dc 01       	movw	r26, r24
     334:	cb 01       	movw	r24, r22
     336:	07 2e       	mov	r0, r23
     338:	7b e0       	ldi	r23, 0x0B	; 11
     33a:	b5 95       	asr	r27
     33c:	a7 95       	ror	r26
     33e:	97 95       	ror	r25
     340:	87 95       	ror	r24
     342:	7a 95       	dec	r23
     344:	d1 f7       	brne	.-12     	; 0x33a <Press+0xee>
     346:	70 2d       	mov	r23, r0
     348:	88 0e       	add	r8, r24
     34a:	99 1e       	adc	r9, r25
     34c:	aa 1e       	adc	r10, r26
     34e:	bb 1e       	adc	r11, r27
     350:	80 91 70 03 	lds	r24, 0x0370	; 0x800370 <AC1>
     354:	90 91 71 03 	lds	r25, 0x0371	; 0x800371 <AC1+0x1>
     358:	88 0f       	add	r24, r24
     35a:	99 1f       	adc	r25, r25
     35c:	88 0f       	add	r24, r24
     35e:	99 1f       	adc	r25, r25
     360:	09 2e       	mov	r0, r25
     362:	00 0c       	add	r0, r0
     364:	aa 0b       	sbc	r26, r26
     366:	bb 0b       	sbc	r27, r27
     368:	88 0e       	add	r8, r24
     36a:	99 1e       	adc	r9, r25
     36c:	aa 1e       	adc	r10, r26
     36e:	bb 1e       	adc	r11, r27
     370:	88 0c       	add	r8, r8
     372:	99 1c       	adc	r9, r9
     374:	aa 1c       	adc	r10, r10
     376:	bb 1c       	adc	r11, r11
     378:	32 e0       	ldi	r19, 0x02	; 2
     37a:	83 0e       	add	r8, r19
     37c:	91 1c       	adc	r9, r1
     37e:	a1 1c       	adc	r10, r1
     380:	b1 1c       	adc	r11, r1
     382:	b5 94       	asr	r11
     384:	a7 94       	ror	r10
     386:	97 94       	ror	r9
     388:	87 94       	ror	r8
     38a:	b5 94       	asr	r11
     38c:	a7 94       	ror	r10
     38e:	97 94       	ror	r9
     390:	87 94       	ror	r8
	X1 = (AC3 * B6) >> 13;
     392:	a0 91 8a 03 	lds	r26, 0x038A	; 0x80038a <AC3>
     396:	b0 91 8b 03 	lds	r27, 0x038B	; 0x80038b <AC3+0x1>
     39a:	a3 01       	movw	r20, r6
     39c:	92 01       	movw	r18, r4
     39e:	39 d6       	rcall	.+3186   	; 0x1012 <__mulshisi3>
     3a0:	2b 01       	movw	r4, r22
     3a2:	3c 01       	movw	r6, r24
     3a4:	03 2e       	mov	r0, r19
     3a6:	3d e0       	ldi	r19, 0x0D	; 13
     3a8:	75 94       	asr	r7
     3aa:	67 94       	ror	r6
     3ac:	57 94       	ror	r5
     3ae:	47 94       	ror	r4
     3b0:	3a 95       	dec	r19
     3b2:	d1 f7       	brne	.-12     	; 0x3a8 <Press+0x15c>
     3b4:	30 2d       	mov	r19, r0
	X2 = (B1 * ((B6 * B6) >> 12)) >> 16;
     3b6:	a0 91 9b 03 	lds	r26, 0x039B	; 0x80039b <B1>
     3ba:	b0 91 9c 03 	lds	r27, 0x039C	; 0x80039c <B1+0x1>
     3be:	29 81       	ldd	r18, Y+1	; 0x01
     3c0:	3a 81       	ldd	r19, Y+2	; 0x02
     3c2:	4b 81       	ldd	r20, Y+3	; 0x03
     3c4:	5c 81       	ldd	r21, Y+4	; 0x04
     3c6:	25 d6       	rcall	.+3146   	; 0x1012 <__mulshisi3>
     3c8:	bb 27       	eor	r27, r27
     3ca:	97 fd       	sbrc	r25, 7
     3cc:	b0 95       	com	r27
     3ce:	ab 2f       	mov	r26, r27
	X3 = ((X1 + X2) + 2) >> 2;
     3d0:	84 0d       	add	r24, r4
     3d2:	95 1d       	adc	r25, r5
     3d4:	a6 1d       	adc	r26, r6
     3d6:	b7 1d       	adc	r27, r7
     3d8:	02 96       	adiw	r24, 0x02	; 2
     3da:	a1 1d       	adc	r26, r1
     3dc:	b1 1d       	adc	r27, r1
     3de:	ac 01       	movw	r20, r24
     3e0:	bd 01       	movw	r22, r26
     3e2:	75 95       	asr	r23
     3e4:	67 95       	ror	r22
     3e6:	57 95       	ror	r21
     3e8:	47 95       	ror	r20
     3ea:	75 95       	asr	r23
     3ec:	67 95       	ror	r22
     3ee:	57 95       	ror	r21
     3f0:	47 95       	ror	r20
     3f2:	40 93 8e 03 	sts	0x038E, r20	; 0x80038e <X3>
     3f6:	50 93 8f 03 	sts	0x038F, r21	; 0x80038f <X3+0x1>
     3fa:	60 93 90 03 	sts	0x0390, r22	; 0x800390 <X3+0x2>
     3fe:	70 93 91 03 	sts	0x0391, r23	; 0x800391 <X3+0x3>
	unsigned long B4 = (AC4 * (unsigned long)(X3 + 32768)) >> 15;
     402:	a0 91 80 03 	lds	r26, 0x0380	; 0x800380 <AC4>
     406:	b0 91 81 03 	lds	r27, 0x0381	; 0x800381 <AC4+0x1>
     40a:	9a 01       	movw	r18, r20
     40c:	ab 01       	movw	r20, r22
     40e:	30 58       	subi	r19, 0x80	; 128
     410:	4f 4f       	sbci	r20, 0xFF	; 255
     412:	5f 4f       	sbci	r21, 0xFF	; 255
     414:	f4 d5       	rcall	.+3048   	; 0xffe <__muluhisi3>
     416:	2b 01       	movw	r4, r22
     418:	3c 01       	movw	r6, r24
     41a:	03 2e       	mov	r0, r19
     41c:	3f e0       	ldi	r19, 0x0F	; 15
     41e:	76 94       	lsr	r7
     420:	67 94       	ror	r6
     422:	57 94       	ror	r5
     424:	47 94       	ror	r4
     426:	3a 95       	dec	r19
     428:	d1 f7       	brne	.-12     	; 0x41e <__LOCK_REGION_LENGTH__+0x1e>
     42a:	30 2d       	mov	r19, r0
	unsigned long B7 = ((unsigned long)UP - B3) * (50000 >> oss);
     42c:	d7 01       	movw	r26, r14
     42e:	c6 01       	movw	r24, r12
     430:	8e 0f       	add	r24, r30
     432:	91 1d       	adc	r25, r1
     434:	a1 1d       	adc	r26, r1
     436:	b1 1d       	adc	r27, r1
     438:	68 94       	set
     43a:	16 f8       	bld	r1, 6
     43c:	b5 95       	asr	r27
     43e:	a7 95       	ror	r26
     440:	97 95       	ror	r25
     442:	87 95       	ror	r24
     444:	16 94       	lsr	r1
     446:	d1 f7       	brne	.-12     	; 0x43c <__LOCK_REGION_LENGTH__+0x3c>
     448:	9c 01       	movw	r18, r24
     44a:	ad 01       	movw	r20, r26
     44c:	28 19       	sub	r18, r8
     44e:	39 09       	sbc	r19, r9
     450:	4a 09       	sbc	r20, r10
     452:	5b 09       	sbc	r21, r11
     454:	a8 ea       	ldi	r26, 0xA8	; 168
     456:	b1 e6       	ldi	r27, 0x61	; 97
     458:	d2 d5       	rcall	.+2980   	; 0xffe <__muluhisi3>
	if (B7 < 0x80000000)
     45a:	99 23       	and	r25, r25
     45c:	84 f0       	brlt	.+32     	; 0x47e <__LOCK_REGION_LENGTH__+0x7e>
	{
		P = (B7 * 2) / B4;
     45e:	66 0f       	add	r22, r22
     460:	77 1f       	adc	r23, r23
     462:	88 1f       	adc	r24, r24
     464:	99 1f       	adc	r25, r25
     466:	a3 01       	movw	r20, r6
     468:	92 01       	movw	r18, r4
     46a:	7f d5       	rcall	.+2814   	; 0xf6a <__udivmodsi4>
     46c:	20 93 9f 03 	sts	0x039F, r18	; 0x80039f <P>
     470:	30 93 a0 03 	sts	0x03A0, r19	; 0x8003a0 <P+0x1>
     474:	40 93 a1 03 	sts	0x03A1, r20	; 0x8003a1 <P+0x2>
     478:	50 93 a2 03 	sts	0x03A2, r21	; 0x8003a2 <P+0x3>
     47c:	11 c0       	rjmp	.+34     	; 0x4a0 <__LOCK_REGION_LENGTH__+0xa0>
	}else
	{
		P = (B7 / B4) * 2;
     47e:	a3 01       	movw	r20, r6
     480:	92 01       	movw	r18, r4
     482:	73 d5       	rcall	.+2790   	; 0xf6a <__udivmodsi4>
     484:	da 01       	movw	r26, r20
     486:	c9 01       	movw	r24, r18
     488:	88 0f       	add	r24, r24
     48a:	99 1f       	adc	r25, r25
     48c:	aa 1f       	adc	r26, r26
     48e:	bb 1f       	adc	r27, r27
     490:	80 93 9f 03 	sts	0x039F, r24	; 0x80039f <P>
     494:	90 93 a0 03 	sts	0x03A0, r25	; 0x8003a0 <P+0x1>
     498:	a0 93 a1 03 	sts	0x03A1, r26	; 0x8003a1 <P+0x2>
     49c:	b0 93 a2 03 	sts	0x03A2, r27	; 0x8003a2 <P+0x3>
	}
	
	X1 = (P >> 8) * (P >> 8);
     4a0:	c0 90 9f 03 	lds	r12, 0x039F	; 0x80039f <P>
     4a4:	d0 90 a0 03 	lds	r13, 0x03A0	; 0x8003a0 <P+0x1>
     4a8:	e0 90 a1 03 	lds	r14, 0x03A1	; 0x8003a1 <P+0x2>
     4ac:	f0 90 a2 03 	lds	r15, 0x03A2	; 0x8003a2 <P+0x3>
     4b0:	99 27       	eor	r25, r25
     4b2:	f7 fc       	sbrc	r15, 7
     4b4:	9a 95       	dec	r25
     4b6:	8f 2d       	mov	r24, r15
     4b8:	7e 2d       	mov	r23, r14
     4ba:	6d 2d       	mov	r22, r13
	X1 = (X1 * 3038) >> 16;
     4bc:	9b 01       	movw	r18, r22
     4be:	ac 01       	movw	r20, r24
     4c0:	45 d5       	rcall	.+2698   	; 0xf4c <__mulsi3>
     4c2:	9b 01       	movw	r18, r22
     4c4:	ac 01       	movw	r20, r24
     4c6:	ae ed       	ldi	r26, 0xDE	; 222
     4c8:	bb e0       	ldi	r27, 0x0B	; 11
     4ca:	99 d5       	rcall	.+2866   	; 0xffe <__muluhisi3>
     4cc:	4c 01       	movw	r8, r24
     4ce:	bb 24       	eor	r11, r11
     4d0:	97 fc       	sbrc	r9, 7
     4d2:	b0 94       	com	r11
     4d4:	ab 2c       	mov	r10, r11
     4d6:	80 92 84 03 	sts	0x0384, r8	; 0x800384 <X1>
     4da:	90 92 85 03 	sts	0x0385, r9	; 0x800385 <X1+0x1>
     4de:	a0 92 86 03 	sts	0x0386, r10	; 0x800386 <X1+0x2>
     4e2:	b0 92 87 03 	sts	0x0387, r11	; 0x800387 <X1+0x3>
	X2 = (-7357 * P) >> 16;
     4e6:	a3 e4       	ldi	r26, 0x43	; 67
     4e8:	b3 ee       	ldi	r27, 0xE3	; 227
     4ea:	a7 01       	movw	r20, r14
     4ec:	96 01       	movw	r18, r12
     4ee:	93 d5       	rcall	.+2854   	; 0x1016 <__mulohisi3>
     4f0:	bb 27       	eor	r27, r27
     4f2:	97 fd       	sbrc	r25, 7
     4f4:	b0 95       	com	r27
     4f6:	ab 2f       	mov	r26, r27
     4f8:	80 93 74 03 	sts	0x0374, r24	; 0x800374 <X2>
     4fc:	90 93 75 03 	sts	0x0375, r25	; 0x800375 <X2+0x1>
     500:	a0 93 76 03 	sts	0x0376, r26	; 0x800376 <X2+0x2>
     504:	b0 93 77 03 	sts	0x0377, r27	; 0x800377 <X2+0x3>
	P = P + ((X1 + X2 + 3791) >> 4);
	P = (P * 760) / 101325; // Перевод в мм.рт.ст.
     508:	88 0d       	add	r24, r8
     50a:	99 1d       	adc	r25, r9
     50c:	aa 1d       	adc	r26, r10
     50e:	bb 1d       	adc	r27, r11
     510:	81 53       	subi	r24, 0x31	; 49
     512:	91 4f       	sbci	r25, 0xF1	; 241
     514:	af 4f       	sbci	r26, 0xFF	; 255
     516:	bf 4f       	sbci	r27, 0xFF	; 255
     518:	68 94       	set
     51a:	13 f8       	bld	r1, 3
     51c:	b5 95       	asr	r27
     51e:	a7 95       	ror	r26
     520:	97 95       	ror	r25
     522:	87 95       	ror	r24
     524:	16 94       	lsr	r1
     526:	d1 f7       	brne	.-12     	; 0x51c <__stack+0x1d>
     528:	9c 01       	movw	r18, r24
     52a:	ad 01       	movw	r20, r26
     52c:	2c 0d       	add	r18, r12
     52e:	3d 1d       	adc	r19, r13
     530:	4e 1d       	adc	r20, r14
     532:	5f 1d       	adc	r21, r15
     534:	a8 ef       	ldi	r26, 0xF8	; 248
     536:	b2 e0       	ldi	r27, 0x02	; 2
     538:	62 d5       	rcall	.+2756   	; 0xffe <__muluhisi3>
     53a:	2d ec       	ldi	r18, 0xCD	; 205
     53c:	3b e8       	ldi	r19, 0x8B	; 139
     53e:	41 e0       	ldi	r20, 0x01	; 1
     540:	50 e0       	ldi	r21, 0x00	; 0
     542:	35 d5       	rcall	.+2666   	; 0xfae <__divmodsi4>
     544:	20 93 9f 03 	sts	0x039F, r18	; 0x80039f <P>
     548:	30 93 a0 03 	sts	0x03A0, r19	; 0x8003a0 <P+0x1>
     54c:	40 93 a1 03 	sts	0x03A1, r20	; 0x8003a1 <P+0x2>
     550:	50 93 a2 03 	sts	0x03A2, r21	; 0x8003a2 <P+0x3>
	return P;
}
     554:	ca 01       	movw	r24, r20
     556:	b9 01       	movw	r22, r18
     558:	0f 90       	pop	r0
     55a:	0f 90       	pop	r0
     55c:	0f 90       	pop	r0
     55e:	0f 90       	pop	r0
     560:	df 91       	pop	r29
     562:	cf 91       	pop	r28
     564:	ff 90       	pop	r15
     566:	ef 90       	pop	r14
     568:	df 90       	pop	r13
     56a:	cf 90       	pop	r12
     56c:	bf 90       	pop	r11
     56e:	af 90       	pop	r10
     570:	9f 90       	pop	r9
     572:	8f 90       	pop	r8
     574:	7f 90       	pop	r7
     576:	6f 90       	pop	r6
     578:	5f 90       	pop	r5
     57a:	4f 90       	pop	r4
     57c:	08 95       	ret

0000057e <__vector_11>:

ISR (TIMER1_COMPA_vect)
{
     57e:	1f 92       	push	r1
     580:	0f 92       	push	r0
     582:	0f b6       	in	r0, 0x3f	; 63
     584:	0f 92       	push	r0
     586:	11 24       	eor	r1, r1
     588:	8f 93       	push	r24
	if (x == 30)
     58a:	80 91 64 03 	lds	r24, 0x0364	; 0x800364 <x>
     58e:	8e 31       	cpi	r24, 0x1E	; 30
     590:	11 f4       	brne	.+4      	; 0x596 <__vector_11+0x18>
		//I_RH = OneWireReceive();// первый байт - целое число влажности
		//D_RH = OneWireReceive();// второй байт - десятичное значение влажности после точки
		//I_Temp = OneWireReceive();// третий байт - целое число температуры
		//D_Temp = OneWireReceive();// четвёртый байт - десятичное значение температуры после точки
		//CheckSum = OneWireReceive();// пятый байт - контрольная сумма
		x = 0;
     592:	10 92 64 03 	sts	0x0364, r1	; 0x800364 <x>
	}
	x += 1;
     596:	80 91 64 03 	lds	r24, 0x0364	; 0x800364 <x>
     59a:	8f 5f       	subi	r24, 0xFF	; 255
     59c:	80 93 64 03 	sts	0x0364, r24	; 0x800364 <x>
}
     5a0:	8f 91       	pop	r24
     5a2:	0f 90       	pop	r0
     5a4:	0f be       	out	0x3f, r0	; 63
     5a6:	0f 90       	pop	r0
     5a8:	1f 90       	pop	r1
     5aa:	18 95       	reti

000005ac <main>:

int main(void)
{

	AC1 = (I2C_read(0xAA) << 8) + I2C_read(0xAB);
     5ac:	8a ea       	ldi	r24, 0xAA	; 170
     5ae:	c8 dd       	rcall	.-1136   	; 0x140 <I2C_read>
     5b0:	c8 2f       	mov	r28, r24
     5b2:	8b ea       	ldi	r24, 0xAB	; 171
     5b4:	c5 dd       	rcall	.-1142   	; 0x140 <I2C_read>
     5b6:	2c 2f       	mov	r18, r28
     5b8:	30 e0       	ldi	r19, 0x00	; 0
     5ba:	32 2f       	mov	r19, r18
     5bc:	22 27       	eor	r18, r18
     5be:	28 0f       	add	r18, r24
     5c0:	31 1d       	adc	r19, r1
     5c2:	30 93 71 03 	sts	0x0371, r19	; 0x800371 <AC1+0x1>
     5c6:	20 93 70 03 	sts	0x0370, r18	; 0x800370 <AC1>
	AC2 = (I2C_read(0xAC) << 8) + I2C_read(0xAD);
     5ca:	8c ea       	ldi	r24, 0xAC	; 172
     5cc:	b9 dd       	rcall	.-1166   	; 0x140 <I2C_read>
     5ce:	c8 2f       	mov	r28, r24
     5d0:	8d ea       	ldi	r24, 0xAD	; 173
     5d2:	b6 dd       	rcall	.-1172   	; 0x140 <I2C_read>
     5d4:	2c 2f       	mov	r18, r28
     5d6:	30 e0       	ldi	r19, 0x00	; 0
     5d8:	32 2f       	mov	r19, r18
     5da:	22 27       	eor	r18, r18
     5dc:	28 0f       	add	r18, r24
     5de:	31 1d       	adc	r19, r1
     5e0:	30 93 89 03 	sts	0x0389, r19	; 0x800389 <AC2+0x1>
     5e4:	20 93 88 03 	sts	0x0388, r18	; 0x800388 <AC2>
	AC3 = (I2C_read(0xAE) << 8) + I2C_read(0xAF);
     5e8:	8e ea       	ldi	r24, 0xAE	; 174
     5ea:	aa dd       	rcall	.-1196   	; 0x140 <I2C_read>
     5ec:	c8 2f       	mov	r28, r24
     5ee:	8f ea       	ldi	r24, 0xAF	; 175
     5f0:	a7 dd       	rcall	.-1202   	; 0x140 <I2C_read>
     5f2:	2c 2f       	mov	r18, r28
     5f4:	30 e0       	ldi	r19, 0x00	; 0
     5f6:	32 2f       	mov	r19, r18
     5f8:	22 27       	eor	r18, r18
     5fa:	28 0f       	add	r18, r24
     5fc:	31 1d       	adc	r19, r1
     5fe:	30 93 8b 03 	sts	0x038B, r19	; 0x80038b <AC3+0x1>
     602:	20 93 8a 03 	sts	0x038A, r18	; 0x80038a <AC3>
	AC4 = (I2C_read(0xB0) << 8) + I2C_read(0xB1);
     606:	80 eb       	ldi	r24, 0xB0	; 176
     608:	9b dd       	rcall	.-1226   	; 0x140 <I2C_read>
     60a:	c8 2f       	mov	r28, r24
     60c:	81 eb       	ldi	r24, 0xB1	; 177
     60e:	98 dd       	rcall	.-1232   	; 0x140 <I2C_read>
     610:	2c 2f       	mov	r18, r28
     612:	30 e0       	ldi	r19, 0x00	; 0
     614:	32 2f       	mov	r19, r18
     616:	22 27       	eor	r18, r18
     618:	28 0f       	add	r18, r24
     61a:	31 1d       	adc	r19, r1
     61c:	30 93 81 03 	sts	0x0381, r19	; 0x800381 <AC4+0x1>
     620:	20 93 80 03 	sts	0x0380, r18	; 0x800380 <AC4>
	AC5 = (I2C_read(0xB2) << 8) + I2C_read(0xB3);
     624:	82 eb       	ldi	r24, 0xB2	; 178
     626:	8c dd       	rcall	.-1256   	; 0x140 <I2C_read>
     628:	c8 2f       	mov	r28, r24
     62a:	83 eb       	ldi	r24, 0xB3	; 179
     62c:	89 dd       	rcall	.-1262   	; 0x140 <I2C_read>
     62e:	2c 2f       	mov	r18, r28
     630:	30 e0       	ldi	r19, 0x00	; 0
     632:	32 2f       	mov	r19, r18
     634:	22 27       	eor	r18, r18
     636:	28 0f       	add	r18, r24
     638:	31 1d       	adc	r19, r1
     63a:	30 93 79 03 	sts	0x0379, r19	; 0x800379 <AC5+0x1>
     63e:	20 93 78 03 	sts	0x0378, r18	; 0x800378 <AC5>
	AC6 = (I2C_read(0xB4)<< 8) + I2C_read(0xB5);
     642:	84 eb       	ldi	r24, 0xB4	; 180
     644:	7d dd       	rcall	.-1286   	; 0x140 <I2C_read>
     646:	c8 2f       	mov	r28, r24
     648:	85 eb       	ldi	r24, 0xB5	; 181
     64a:	7a dd       	rcall	.-1292   	; 0x140 <I2C_read>
     64c:	2c 2f       	mov	r18, r28
     64e:	30 e0       	ldi	r19, 0x00	; 0
     650:	32 2f       	mov	r19, r18
     652:	22 27       	eor	r18, r18
     654:	28 0f       	add	r18, r24
     656:	31 1d       	adc	r19, r1
     658:	30 93 73 03 	sts	0x0373, r19	; 0x800373 <AC6+0x1>
     65c:	20 93 72 03 	sts	0x0372, r18	; 0x800372 <AC6>
	B1 = (I2C_read(0xB6) << 8) + I2C_read(0xB7);
     660:	86 eb       	ldi	r24, 0xB6	; 182
     662:	6e dd       	rcall	.-1316   	; 0x140 <I2C_read>
     664:	c8 2f       	mov	r28, r24
     666:	87 eb       	ldi	r24, 0xB7	; 183
     668:	6b dd       	rcall	.-1322   	; 0x140 <I2C_read>
     66a:	2c 2f       	mov	r18, r28
     66c:	30 e0       	ldi	r19, 0x00	; 0
     66e:	32 2f       	mov	r19, r18
     670:	22 27       	eor	r18, r18
     672:	28 0f       	add	r18, r24
     674:	31 1d       	adc	r19, r1
     676:	30 93 9c 03 	sts	0x039C, r19	; 0x80039c <B1+0x1>
     67a:	20 93 9b 03 	sts	0x039B, r18	; 0x80039b <B1>
	B2 = (I2C_read(0xB8) << 8) + I2C_read(0xB9);
     67e:	88 eb       	ldi	r24, 0xB8	; 184
     680:	5f dd       	rcall	.-1346   	; 0x140 <I2C_read>
     682:	c8 2f       	mov	r28, r24
     684:	89 eb       	ldi	r24, 0xB9	; 185
     686:	5c dd       	rcall	.-1352   	; 0x140 <I2C_read>
     688:	2c 2f       	mov	r18, r28
     68a:	30 e0       	ldi	r19, 0x00	; 0
     68c:	32 2f       	mov	r19, r18
     68e:	22 27       	eor	r18, r18
     690:	28 0f       	add	r18, r24
     692:	31 1d       	adc	r19, r1
     694:	30 93 8d 03 	sts	0x038D, r19	; 0x80038d <B2+0x1>
     698:	20 93 8c 03 	sts	0x038C, r18	; 0x80038c <B2>
	//MB = I2C_read(0xBA)*256 + I2C_read(0xBB);
	MC = (I2C_read(0xBC) << 8) + I2C_read(0xBD);
     69c:	8c eb       	ldi	r24, 0xBC	; 188
     69e:	50 dd       	rcall	.-1376   	; 0x140 <I2C_read>
     6a0:	c8 2f       	mov	r28, r24
     6a2:	8d eb       	ldi	r24, 0xBD	; 189
     6a4:	4d dd       	rcall	.-1382   	; 0x140 <I2C_read>
     6a6:	2c 2f       	mov	r18, r28
     6a8:	30 e0       	ldi	r19, 0x00	; 0
     6aa:	32 2f       	mov	r19, r18
     6ac:	22 27       	eor	r18, r18
     6ae:	28 0f       	add	r18, r24
     6b0:	31 1d       	adc	r19, r1
     6b2:	30 93 9e 03 	sts	0x039E, r19	; 0x80039e <MC+0x1>
     6b6:	20 93 9d 03 	sts	0x039D, r18	; 0x80039d <MC>
	MD = (I2C_read(0xBE) << 8) + I2C_read(0xBF);
     6ba:	8e eb       	ldi	r24, 0xBE	; 190
     6bc:	41 dd       	rcall	.-1406   	; 0x140 <I2C_read>
     6be:	c8 2f       	mov	r28, r24
     6c0:	8f eb       	ldi	r24, 0xBF	; 191
     6c2:	3e dd       	rcall	.-1412   	; 0x140 <I2C_read>
     6c4:	2c 2f       	mov	r18, r28
     6c6:	30 e0       	ldi	r19, 0x00	; 0
     6c8:	32 2f       	mov	r19, r18
     6ca:	22 27       	eor	r18, r18
     6cc:	28 0f       	add	r18, r24
     6ce:	31 1d       	adc	r19, r1
     6d0:	30 93 6f 03 	sts	0x036F, r19	; 0x80036f <MD+0x1>
     6d4:	20 93 6e 03 	sts	0x036E, r18	; 0x80036e <MD>
	
	DDRB = 0xFF;
     6d8:	8f ef       	ldi	r24, 0xFF	; 255
     6da:	84 b9       	out	0x04, r24	; 4
	
	I2C_Init();// инициализация шины
     6dc:	f0 dc       	rcall	.-1568   	; 0xbe <I2C_Init>
	LCD_init();// Nokia
     6de:	45 d1       	rcall	.+650    	; 0x96a <LCD_init>
	init_pwm();
     6e0:	38 d2       	rcall	.+1136   	; 0xb52 <init_pwm>
	init_adc();
     6e2:	e0 dc       	rcall	.-1600   	; 0xa4 <init_adc>

	DDRC |= (1 << PC0);
     6e4:	38 9a       	sbi	0x07, 0	; 7
	
	PORTD |= (1 << PD7);
     6e6:	5f 9a       	sbi	0x0b, 7	; 11
	//{
	//LCD_write_byte(pgm_read_byte (frame_1 + n), 0);
	//_delay_ms(2);
	//}
	//_delay_ms(2000);
	OCR1A = 10;
     6e8:	8a e0       	ldi	r24, 0x0A	; 10
     6ea:	90 e0       	ldi	r25, 0x00	; 0
     6ec:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__DATA_REGION_ORIGIN__+0x29>
     6f0:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__DATA_REGION_ORIGIN__+0x28>
	
	LCD_clear();
     6f4:	28 d1       	rcall	.+592    	; 0x946 <LCD_clear>
	//	DDRD |= (1 << PD7);
	sei();
     6f6:	78 94       	sei
		}

		KEY_1_current = KEY_1;
		if ((KEY_1_previous != 0) && (KEY_1_current == 0))
		{
			OCR1A += 10;
     6f8:	c8 e8       	ldi	r28, 0x88	; 136
     6fa:	d0 e0       	ldi	r29, 0x00	; 0
	//	DDRD |= (1 << PD7);
	sei();
	
	while (1)
	{
		u_bat = ((adc_device(6) * 6.68) / 1023);
     6fc:	86 e0       	ldi	r24, 0x06	; 6
     6fe:	b6 dc       	rcall	.-1684   	; 0x6c <adc_device>
     700:	bc 01       	movw	r22, r24
     702:	80 e0       	ldi	r24, 0x00	; 0
     704:	90 e0       	ldi	r25, 0x00	; 0
     706:	d5 d2       	rcall	.+1450   	; 0xcb2 <__floatunsisf>
     708:	2f e8       	ldi	r18, 0x8F	; 143
     70a:	32 ec       	ldi	r19, 0xC2	; 194
     70c:	45 ed       	ldi	r20, 0xD5	; 213
     70e:	50 e4       	ldi	r21, 0x40	; 64
     710:	ba d3       	rcall	.+1908   	; 0xe86 <__mulsf3>
     712:	20 e0       	ldi	r18, 0x00	; 0
     714:	30 ec       	ldi	r19, 0xC0	; 192
     716:	4f e7       	ldi	r20, 0x7F	; 127
     718:	54 e4       	ldi	r21, 0x44	; 68
     71a:	37 d2       	rcall	.+1134   	; 0xb8a <__divsf3>
     71c:	60 93 69 03 	sts	0x0369, r22	; 0x800369 <u_bat>
     720:	70 93 6a 03 	sts	0x036A, r23	; 0x80036a <u_bat+0x1>
     724:	80 93 6b 03 	sts	0x036B, r24	; 0x80036b <u_bat+0x2>
     728:	90 93 6c 03 	sts	0x036C, r25	; 0x80036c <u_bat+0x3>
		u_hv = adc_device(7);
     72c:	87 e0       	ldi	r24, 0x07	; 7
     72e:	9e dc       	rcall	.-1732   	; 0x6c <adc_device>
     730:	bc 01       	movw	r22, r24
     732:	80 e0       	ldi	r24, 0x00	; 0
     734:	90 e0       	ldi	r25, 0x00	; 0
     736:	bd d2       	rcall	.+1402   	; 0xcb2 <__floatunsisf>
     738:	60 93 65 03 	sts	0x0365, r22	; 0x800365 <u_hv>
     73c:	70 93 66 03 	sts	0x0366, r23	; 0x800366 <u_hv+0x1>
     740:	80 93 67 03 	sts	0x0367, r24	; 0x800367 <u_hv+0x2>
     744:	90 93 68 03 	sts	0x0368, r25	; 0x800368 <u_hv+0x3>
		////		_delay_ms(1000);
		////	}
		////	else
		////	{
		//
		if (lcd == 0)
     748:	80 91 63 03 	lds	r24, 0x0363	; 0x800363 <lcd>
     74c:	81 11       	cpse	r24, r1
     74e:	4f c0       	rjmp	.+158    	; 0x7ee <main+0x242>
		{
			LCD_write_english_string(0,0,"Temper: ");
     750:	40 e0       	ldi	r20, 0x00	; 0
     752:	51 e0       	ldi	r21, 0x01	; 1
     754:	60 e0       	ldi	r22, 0x00	; 0
     756:	4c d1       	rcall	.+664    	; 0x9f0 <LCD_write_english_string>
			LCD_var_str(45,0, I_Temp, 2); // тут порешать почему такие значения для сдвига по X
     758:	40 91 97 03 	lds	r20, 0x0397	; 0x800397 <I_Temp>
     75c:	50 e0       	ldi	r21, 0x00	; 0
     75e:	22 e0       	ldi	r18, 0x02	; 2
     760:	60 e0       	ldi	r22, 0x00	; 0
     762:	8d e2       	ldi	r24, 0x2D	; 45
     764:	54 d1       	rcall	.+680    	; 0xa0e <LCD_var_str>
			LCD_write_english_string(57,0,".");
     766:	49 e0       	ldi	r20, 0x09	; 9
     768:	51 e0       	ldi	r21, 0x01	; 1
     76a:	60 e0       	ldi	r22, 0x00	; 0
     76c:	89 e3       	ldi	r24, 0x39	; 57
     76e:	40 d1       	rcall	.+640    	; 0x9f0 <LCD_write_english_string>
			LCD_var_str(63,0, D_Temp, 1);
     770:	40 91 9a 03 	lds	r20, 0x039A	; 0x80039a <D_Temp>
     774:	50 e0       	ldi	r21, 0x00	; 0
     776:	21 e0       	ldi	r18, 0x01	; 1
     778:	60 e0       	ldi	r22, 0x00	; 0
     77a:	8f e3       	ldi	r24, 0x3F	; 63
     77c:	48 d1       	rcall	.+656    	; 0xa0e <LCD_var_str>
			LCD_write_english_string(70,0,"C");
     77e:	4b e0       	ldi	r20, 0x0B	; 11
     780:	51 e0       	ldi	r21, 0x01	; 1
     782:	60 e0       	ldi	r22, 0x00	; 0
     784:	86 e4       	ldi	r24, 0x46	; 70
     786:	34 d1       	rcall	.+616    	; 0x9f0 <LCD_write_english_string>
			LCD_write_english_string(0,1,"Humidity: ");
     788:	4d e0       	ldi	r20, 0x0D	; 13
     78a:	51 e0       	ldi	r21, 0x01	; 1
     78c:	61 e0       	ldi	r22, 0x01	; 1
     78e:	80 e0       	ldi	r24, 0x00	; 0
     790:	2f d1       	rcall	.+606    	; 0x9f0 <LCD_write_english_string>
			LCD_var_str(57,1, I_RH, 2);
     792:	40 91 98 03 	lds	r20, 0x0398	; 0x800398 <I_RH>
     796:	50 e0       	ldi	r21, 0x00	; 0
     798:	22 e0       	ldi	r18, 0x02	; 2
     79a:	61 e0       	ldi	r22, 0x01	; 1
     79c:	89 e3       	ldi	r24, 0x39	; 57
     79e:	37 d1       	rcall	.+622    	; 0xa0e <LCD_var_str>
			LCD_write_english_string(72,1,"%");
     7a0:	48 e1       	ldi	r20, 0x18	; 24
     7a2:	51 e0       	ldi	r21, 0x01	; 1
     7a4:	61 e0       	ldi	r22, 0x01	; 1
     7a6:	88 e4       	ldi	r24, 0x48	; 72
     7a8:	23 d1       	rcall	.+582    	; 0x9f0 <LCD_write_english_string>
			
			//LCD_var_str(0,2, adc_device(6), 3);
			
			LCD_write_english_string(0,3,"Temp: ");
     7aa:	4a e1       	ldi	r20, 0x1A	; 26
     7ac:	51 e0       	ldi	r21, 0x01	; 1
     7ae:	63 e0       	ldi	r22, 0x03	; 3
     7b0:	80 e0       	ldi	r24, 0x00	; 0
     7b2:	1e d1       	rcall	.+572    	; 0x9f0 <LCD_write_english_string>
			LCD_var_str(35,3, Temp(), 3); // тут порешать почему такие значения для сдвига по X
     7b4:	d5 dc       	rcall	.-1622   	; 0x160 <Temp>
     7b6:	51 d2       	rcall	.+1186   	; 0xc5a <__fixunssfsi>
     7b8:	23 e0       	ldi	r18, 0x03	; 3
     7ba:	ab 01       	movw	r20, r22
     7bc:	63 e0       	ldi	r22, 0x03	; 3
     7be:	83 e2       	ldi	r24, 0x23	; 35
     7c0:	26 d1       	rcall	.+588    	; 0xa0e <LCD_var_str>
			//LCD_write_english_string(47,3,".");
			//LCD_var_str(52,3, fmod(Temp(),10), 1);
			LCD_write_english_string(65,3,"C");
     7c2:	4b e0       	ldi	r20, 0x0B	; 11
     7c4:	51 e0       	ldi	r21, 0x01	; 1
     7c6:	63 e0       	ldi	r22, 0x03	; 3
     7c8:	81 e4       	ldi	r24, 0x41	; 65
     7ca:	12 d1       	rcall	.+548    	; 0x9f0 <LCD_write_english_string>
			LCD_write_english_string(0,4,"Press: ");
     7cc:	41 e2       	ldi	r20, 0x21	; 33
     7ce:	51 e0       	ldi	r21, 0x01	; 1
     7d0:	64 e0       	ldi	r22, 0x04	; 4
     7d2:	80 e0       	ldi	r24, 0x00	; 0
     7d4:	0d d1       	rcall	.+538    	; 0x9f0 <LCD_write_english_string>
			LCD_var_str(40,4, Press(), 4);// Давление
     7d6:	3a dd       	rcall	.-1420   	; 0x24c <Press>
     7d8:	24 e0       	ldi	r18, 0x04	; 4
     7da:	ab 01       	movw	r20, r22
     7dc:	64 e0       	ldi	r22, 0x04	; 4
     7de:	88 e2       	ldi	r24, 0x28	; 40
     7e0:	16 d1       	rcall	.+556    	; 0xa0e <LCD_var_str>
			LCD_write_english_string(68,4,"Pa");
     7e2:	49 e2       	ldi	r20, 0x29	; 41
     7e4:	51 e0       	ldi	r21, 0x01	; 1
     7e6:	64 e0       	ldi	r22, 0x04	; 4
     7e8:	84 e4       	ldi	r24, 0x44	; 68
     7ea:	02 d1       	rcall	.+516    	; 0x9f0 <LCD_write_english_string>
     7ec:	3e c0       	rjmp	.+124    	; 0x86a <main+0x2be>
		}
		else
		{
			LCD_write_english_string(0,0,"Battery: ");
     7ee:	4c e2       	ldi	r20, 0x2C	; 44
     7f0:	51 e0       	ldi	r21, 0x01	; 1
     7f2:	60 e0       	ldi	r22, 0x00	; 0
     7f4:	80 e0       	ldi	r24, 0x00	; 0
     7f6:	fc d0       	rcall	.+504    	; 0x9f0 <LCD_write_english_string>
			LCD_var_str(55,0, u_bat, 1); // тут порешать почему такие значения для сдвига по X
     7f8:	60 91 69 03 	lds	r22, 0x0369	; 0x800369 <u_bat>
     7fc:	70 91 6a 03 	lds	r23, 0x036A	; 0x80036a <u_bat+0x1>
     800:	80 91 6b 03 	lds	r24, 0x036B	; 0x80036b <u_bat+0x2>
     804:	90 91 6c 03 	lds	r25, 0x036C	; 0x80036c <u_bat+0x3>
     808:	28 d2       	rcall	.+1104   	; 0xc5a <__fixunssfsi>
     80a:	21 e0       	ldi	r18, 0x01	; 1
     80c:	ab 01       	movw	r20, r22
     80e:	60 e0       	ldi	r22, 0x00	; 0
     810:	87 e3       	ldi	r24, 0x37	; 55
     812:	fd d0       	rcall	.+506    	; 0xa0e <LCD_var_str>
			LCD_write_english_string(61,0,".");
     814:	49 e0       	ldi	r20, 0x09	; 9
     816:	51 e0       	ldi	r21, 0x01	; 1
     818:	60 e0       	ldi	r22, 0x00	; 0
     81a:	8d e3       	ldi	r24, 0x3D	; 61
     81c:	e9 d0       	rcall	.+466    	; 0x9f0 <LCD_write_english_string>
			LCD_var_str(66,0, fmod (u_bat,10), 1);
     81e:	60 91 69 03 	lds	r22, 0x0369	; 0x800369 <u_bat>
     822:	70 91 6a 03 	lds	r23, 0x036A	; 0x80036a <u_bat+0x1>
     826:	80 91 6b 03 	lds	r24, 0x036B	; 0x80036b <u_bat+0x2>
     82a:	90 91 6c 03 	lds	r25, 0x036C	; 0x80036c <u_bat+0x3>
     82e:	20 e0       	ldi	r18, 0x00	; 0
     830:	30 e0       	ldi	r19, 0x00	; 0
     832:	40 e2       	ldi	r20, 0x20	; 32
     834:	51 e4       	ldi	r21, 0x41	; 65
     836:	81 d2       	rcall	.+1282   	; 0xd3a <fmod>
     838:	10 d2       	rcall	.+1056   	; 0xc5a <__fixunssfsi>
     83a:	21 e0       	ldi	r18, 0x01	; 1
     83c:	ab 01       	movw	r20, r22
     83e:	60 e0       	ldi	r22, 0x00	; 0
     840:	82 e4       	ldi	r24, 0x42	; 66
     842:	e5 d0       	rcall	.+458    	; 0xa0e <LCD_var_str>
			LCD_write_english_string(0,1,"HV:");
     844:	46 e3       	ldi	r20, 0x36	; 54
     846:	51 e0       	ldi	r21, 0x01	; 1
     848:	61 e0       	ldi	r22, 0x01	; 1
     84a:	80 e0       	ldi	r24, 0x00	; 0
     84c:	d1 d0       	rcall	.+418    	; 0x9f0 <LCD_write_english_string>
			LCD_var_str(25,1, u_hv, 4);
     84e:	60 91 65 03 	lds	r22, 0x0365	; 0x800365 <u_hv>
     852:	70 91 66 03 	lds	r23, 0x0366	; 0x800366 <u_hv+0x1>
     856:	80 91 67 03 	lds	r24, 0x0367	; 0x800367 <u_hv+0x2>
     85a:	90 91 68 03 	lds	r25, 0x0368	; 0x800368 <u_hv+0x3>
     85e:	fd d1       	rcall	.+1018   	; 0xc5a <__fixunssfsi>
     860:	24 e0       	ldi	r18, 0x04	; 4
     862:	ab 01       	movw	r20, r22
     864:	61 e0       	ldi	r22, 0x01	; 1
     866:	89 e1       	ldi	r24, 0x19	; 25
     868:	d2 d0       	rcall	.+420    	; 0xa0e <LCD_var_str>
		}

		KEY_1_current = KEY_1;
     86a:	89 b1       	in	r24, 0x09	; 9
     86c:	82 70       	andi	r24, 0x02	; 2
     86e:	80 93 92 03 	sts	0x0392, r24	; 0x800392 <KEY_1_current>
		if ((KEY_1_previous != 0) && (KEY_1_current == 0))
     872:	90 91 95 03 	lds	r25, 0x0395	; 0x800395 <KEY_1_previous>
     876:	99 23       	and	r25, r25
     878:	39 f0       	breq	.+14     	; 0x888 <main+0x2dc>
     87a:	81 11       	cpse	r24, r1
     87c:	05 c0       	rjmp	.+10     	; 0x888 <main+0x2dc>
		{
			OCR1A += 10;
     87e:	88 81       	ld	r24, Y
     880:	99 81       	ldd	r25, Y+1	; 0x01
     882:	0a 96       	adiw	r24, 0x0a	; 10
     884:	99 83       	std	Y+1, r25	; 0x01
     886:	88 83       	st	Y, r24
		}
		KEY_1_previous = KEY_1_current;
     888:	80 91 92 03 	lds	r24, 0x0392	; 0x800392 <KEY_1_current>
     88c:	80 93 95 03 	sts	0x0395, r24	; 0x800395 <KEY_1_previous>
		
		KEY_2_current = KEY_2;
     890:	89 b1       	in	r24, 0x09	; 9
     892:	84 70       	andi	r24, 0x04	; 4
     894:	80 93 6d 03 	sts	0x036D, r24	; 0x80036d <KEY_2_current>
		if ((KEY_2_previous != 0) && (KEY_2_current == 0))
     898:	90 91 7a 03 	lds	r25, 0x037A	; 0x80037a <KEY_2_previous>
     89c:	99 23       	and	r25, r25
     89e:	39 f0       	breq	.+14     	; 0x8ae <main+0x302>
     8a0:	81 11       	cpse	r24, r1
     8a2:	05 c0       	rjmp	.+10     	; 0x8ae <main+0x302>
		{
			OCR1A -= 10;
     8a4:	88 81       	ld	r24, Y
     8a6:	99 81       	ldd	r25, Y+1	; 0x01
     8a8:	0a 97       	sbiw	r24, 0x0a	; 10
     8aa:	99 83       	std	Y+1, r25	; 0x01
     8ac:	88 83       	st	Y, r24
		}
		KEY_2_previous = KEY_2_current;
     8ae:	80 91 6d 03 	lds	r24, 0x036D	; 0x80036d <KEY_2_current>
     8b2:	80 93 7a 03 	sts	0x037A, r24	; 0x80037a <KEY_2_previous>
		LCD_var_str(0,5,x, 3);// Давление
     8b6:	40 91 64 03 	lds	r20, 0x0364	; 0x800364 <x>
     8ba:	50 e0       	ldi	r21, 0x00	; 0
     8bc:	23 e0       	ldi	r18, 0x03	; 3
     8be:	65 e0       	ldi	r22, 0x05	; 5
     8c0:	80 e0       	ldi	r24, 0x00	; 0
     8c2:	a5 d0       	rcall	.+330    	; 0xa0e <LCD_var_str>
		
		KEY_3_current = KEY_3;
     8c4:	89 b1       	in	r24, 0x09	; 9
     8c6:	88 70       	andi	r24, 0x08	; 8
     8c8:	80 93 96 03 	sts	0x0396, r24	; 0x800396 <KEY_3_current>
		if ((KEY_3_previous != 0) && (KEY_3_current == 0))
     8cc:	90 91 7b 03 	lds	r25, 0x037B	; 0x80037b <KEY_3_previous>
     8d0:	99 23       	and	r25, r25
     8d2:	49 f0       	breq	.+18     	; 0x8e6 <main+0x33a>
     8d4:	81 11       	cpse	r24, r1
     8d6:	07 c0       	rjmp	.+14     	; 0x8e6 <main+0x33a>
		{
			lcd ^= 1;
     8d8:	90 91 63 03 	lds	r25, 0x0363	; 0x800363 <lcd>
     8dc:	81 e0       	ldi	r24, 0x01	; 1
     8de:	89 27       	eor	r24, r25
     8e0:	80 93 63 03 	sts	0x0363, r24	; 0x800363 <lcd>
			LCD_clear();
     8e4:	30 d0       	rcall	.+96     	; 0x946 <LCD_clear>
		}
		KEY_3_previous = KEY_3_current;
     8e6:	80 91 96 03 	lds	r24, 0x0396	; 0x800396 <KEY_3_current>
     8ea:	80 93 7b 03 	sts	0x037B, r24	; 0x80037b <KEY_3_previous>
		
		KEY_4_current = KEY_4;
     8ee:	89 b1       	in	r24, 0x09	; 9
     8f0:	80 71       	andi	r24, 0x10	; 16
     8f2:	80 93 a3 03 	sts	0x03A3, r24	; 0x8003a3 <KEY_4_current>
		if ((KEY_4_previous != 0) && (KEY_4_current == 0))
     8f6:	90 91 99 03 	lds	r25, 0x0399	; 0x800399 <KEY_4_previous>
     8fa:	99 23       	and	r25, r25
     8fc:	31 f0       	breq	.+12     	; 0x90a <main+0x35e>
     8fe:	81 11       	cpse	r24, r1
     900:	04 c0       	rjmp	.+8      	; 0x90a <main+0x35e>
		{
			PORTC ^= (1 << PC0);
     902:	98 b1       	in	r25, 0x08	; 8
     904:	81 e0       	ldi	r24, 0x01	; 1
     906:	89 27       	eor	r24, r25
     908:	88 b9       	out	0x08, r24	; 8
		}
		KEY_4_previous = KEY_4_current;
     90a:	80 91 a3 03 	lds	r24, 0x03A3	; 0x8003a3 <KEY_4_current>
     90e:	80 93 99 03 	sts	0x0399, r24	; 0x800399 <KEY_4_previous>
		LCD_var_str(0,5,OCR1A, 3);// Давление
     912:	48 81       	ld	r20, Y
     914:	59 81       	ldd	r21, Y+1	; 0x01
     916:	23 e0       	ldi	r18, 0x03	; 3
     918:	65 e0       	ldi	r22, 0x05	; 5
     91a:	80 e0       	ldi	r24, 0x00	; 0
     91c:	78 d0       	rcall	.+240    	; 0xa0e <LCD_var_str>
		
		//}
	}
     91e:	ee ce       	rjmp	.-548    	; 0x6fc <main+0x150>

00000920 <LCD_write_byte>:

void Read_Image (unsigned char data)
{
	for(int n = 0; n < sizeof(data); n++)
	{
		LCD_write_byte(pgm_read_byte(data + n), 0);
     920:	61 30       	cpi	r22, 0x01	; 1
     922:	11 f4       	brne	.+4      	; 0x928 <LCD_write_byte+0x8>
     924:	2b 98       	cbi	0x05, 3	; 5
     926:	0d c0       	rjmp	.+26     	; 0x942 <LCD_write_byte+0x22>
     928:	2b 9a       	sbi	0x05, 3	; 5
     92a:	0b c0       	rjmp	.+22     	; 0x942 <LCD_write_byte+0x22>
     92c:	88 23       	and	r24, r24
     92e:	14 f4       	brge	.+4      	; 0x934 <LCD_write_byte+0x14>
     930:	2d 9a       	sbi	0x05, 5	; 5
     932:	01 c0       	rjmp	.+2      	; 0x936 <LCD_write_byte+0x16>
     934:	2d 98       	cbi	0x05, 5	; 5
     936:	2c 98       	cbi	0x05, 4	; 5
     938:	88 0f       	add	r24, r24
     93a:	2c 9a       	sbi	0x05, 4	; 5
     93c:	91 50       	subi	r25, 0x01	; 1
     93e:	b1 f7       	brne	.-20     	; 0x92c <LCD_write_byte+0xc>
     940:	08 95       	ret
     942:	98 e0       	ldi	r25, 0x08	; 8
     944:	f3 cf       	rjmp	.-26     	; 0x92c <LCD_write_byte+0xc>

00000946 <LCD_clear>:
     946:	cf 93       	push	r28
     948:	df 93       	push	r29
     94a:	61 e0       	ldi	r22, 0x01	; 1
     94c:	8c e0       	ldi	r24, 0x0C	; 12
     94e:	e8 df       	rcall	.-48     	; 0x920 <LCD_write_byte>
     950:	61 e0       	ldi	r22, 0x01	; 1
     952:	80 e8       	ldi	r24, 0x80	; 128
     954:	e5 df       	rcall	.-54     	; 0x920 <LCD_write_byte>
     956:	c8 ef       	ldi	r28, 0xF8	; 248
     958:	d1 e0       	ldi	r29, 0x01	; 1
     95a:	60 e0       	ldi	r22, 0x00	; 0
     95c:	80 e0       	ldi	r24, 0x00	; 0
     95e:	e0 df       	rcall	.-64     	; 0x920 <LCD_write_byte>
     960:	21 97       	sbiw	r28, 0x01	; 1
     962:	d9 f7       	brne	.-10     	; 0x95a <LCD_clear+0x14>
     964:	df 91       	pop	r29
     966:	cf 91       	pop	r28
     968:	08 95       	ret

0000096a <LCD_init>:
     96a:	28 98       	cbi	0x05, 0	; 5
     96c:	82 e0       	ldi	r24, 0x02	; 2
     96e:	8a 95       	dec	r24
     970:	f1 f7       	brne	.-4      	; 0x96e <LCD_init+0x4>
     972:	00 c0       	rjmp	.+0      	; 0x974 <LCD_init+0xa>
     974:	28 9a       	sbi	0x05, 0	; 5
     976:	82 e0       	ldi	r24, 0x02	; 2
     978:	8a 95       	dec	r24
     97a:	f1 f7       	brne	.-4      	; 0x978 <LCD_init+0xe>
     97c:	00 c0       	rjmp	.+0      	; 0x97e <LCD_init+0x14>
     97e:	61 e0       	ldi	r22, 0x01	; 1
     980:	81 e2       	ldi	r24, 0x21	; 33
     982:	ce df       	rcall	.-100    	; 0x920 <LCD_write_byte>
     984:	61 e0       	ldi	r22, 0x01	; 1
     986:	88 ec       	ldi	r24, 0xC8	; 200
     988:	cb df       	rcall	.-106    	; 0x920 <LCD_write_byte>
     98a:	61 e0       	ldi	r22, 0x01	; 1
     98c:	86 e0       	ldi	r24, 0x06	; 6
     98e:	c8 df       	rcall	.-112    	; 0x920 <LCD_write_byte>
     990:	61 e0       	ldi	r22, 0x01	; 1
     992:	83 e1       	ldi	r24, 0x13	; 19
     994:	c5 df       	rcall	.-118    	; 0x920 <LCD_write_byte>
     996:	61 e0       	ldi	r22, 0x01	; 1
     998:	80 e2       	ldi	r24, 0x20	; 32
     99a:	c2 df       	rcall	.-124    	; 0x920 <LCD_write_byte>
     99c:	61 e0       	ldi	r22, 0x01	; 1
     99e:	8c e0       	ldi	r24, 0x0C	; 12
     9a0:	bf df       	rcall	.-130    	; 0x920 <LCD_write_byte>
     9a2:	d1 df       	rcall	.-94     	; 0x946 <LCD_clear>
     9a4:	08 95       	ret

000009a6 <LCD_set_XY>:
     9a6:	cf 93       	push	r28
     9a8:	c8 2f       	mov	r28, r24
     9aa:	86 2f       	mov	r24, r22
     9ac:	61 e0       	ldi	r22, 0x01	; 1
     9ae:	80 64       	ori	r24, 0x40	; 64
     9b0:	b7 df       	rcall	.-146    	; 0x920 <LCD_write_byte>
     9b2:	61 e0       	ldi	r22, 0x01	; 1
     9b4:	8c 2f       	mov	r24, r28
     9b6:	80 68       	ori	r24, 0x80	; 128
     9b8:	b3 df       	rcall	.-154    	; 0x920 <LCD_write_byte>
     9ba:	cf 91       	pop	r28
     9bc:	08 95       	ret

000009be <LCD_write_char>:
     9be:	1f 93       	push	r17
     9c0:	cf 93       	push	r28
     9c2:	df 93       	push	r29
     9c4:	80 52       	subi	r24, 0x20	; 32
     9c6:	90 e0       	ldi	r25, 0x00	; 0
     9c8:	ec 01       	movw	r28, r24
     9ca:	cc 0f       	add	r28, r28
     9cc:	dd 1f       	adc	r29, r29
     9ce:	c8 0f       	add	r28, r24
     9d0:	d9 1f       	adc	r29, r25
     9d2:	cc 0f       	add	r28, r28
     9d4:	dd 1f       	adc	r29, r29
     9d6:	c6 5c       	subi	r28, 0xC6	; 198
     9d8:	de 4f       	sbci	r29, 0xFE	; 254
     9da:	10 e0       	ldi	r17, 0x00	; 0
     9dc:	60 e0       	ldi	r22, 0x00	; 0
     9de:	89 91       	ld	r24, Y+
     9e0:	9f df       	rcall	.-194    	; 0x920 <LCD_write_byte>
     9e2:	1f 5f       	subi	r17, 0xFF	; 255
     9e4:	16 30       	cpi	r17, 0x06	; 6
     9e6:	d1 f7       	brne	.-12     	; 0x9dc <LCD_write_char+0x1e>
     9e8:	df 91       	pop	r29
     9ea:	cf 91       	pop	r28
     9ec:	1f 91       	pop	r17
     9ee:	08 95       	ret

000009f0 <LCD_write_english_string>:
     9f0:	cf 93       	push	r28
     9f2:	df 93       	push	r29
     9f4:	ea 01       	movw	r28, r20
     9f6:	d7 df       	rcall	.-82     	; 0x9a6 <LCD_set_XY>
     9f8:	88 81       	ld	r24, Y
     9fa:	88 23       	and	r24, r24
     9fc:	29 f0       	breq	.+10     	; 0xa08 <LCD_write_english_string+0x18>
     9fe:	21 96       	adiw	r28, 0x01	; 1
     a00:	de df       	rcall	.-68     	; 0x9be <LCD_write_char>
     a02:	89 91       	ld	r24, Y+
     a04:	81 11       	cpse	r24, r1
     a06:	fc cf       	rjmp	.-8      	; 0xa00 <LCD_write_english_string+0x10>
     a08:	df 91       	pop	r29
     a0a:	cf 91       	pop	r28
     a0c:	08 95       	ret

00000a0e <LCD_var_str>:
	}
}


void LCD_var_str(unsigned char X, unsigned char Y, uint16_t value, uint8_t nDigit)
{
     a0e:	1f 93       	push	r17
     a10:	cf 93       	push	r28
     a12:	df 93       	push	r29
     a14:	ea 01       	movw	r28, r20
     a16:	12 2f       	mov	r17, r18
	LCD_set_XY(X,Y);
     a18:	c6 df       	rcall	.-116    	; 0x9a6 <LCD_set_XY>
	switch(nDigit)
     a1a:	13 30       	cpi	r17, 0x03	; 3
     a1c:	89 f1       	breq	.+98     	; 0xa80 <LCD_var_str+0x72>
     a1e:	38 f4       	brcc	.+14     	; 0xa2e <LCD_var_str+0x20>
     a20:	11 30       	cpi	r17, 0x01	; 1
     a22:	09 f4       	brne	.+2      	; 0xa26 <LCD_var_str+0x18>
     a24:	77 c0       	rjmp	.+238    	; 0xb14 <LCD_var_str+0x106>
     a26:	12 30       	cpi	r17, 0x02	; 2
     a28:	09 f4       	brne	.+2      	; 0xa2c <LCD_var_str+0x1e>
     a2a:	50 c0       	rjmp	.+160    	; 0xacc <LCD_var_str+0xbe>
     a2c:	8e c0       	rjmp	.+284    	; 0xb4a <LCD_var_str+0x13c>
     a2e:	14 30       	cpi	r17, 0x04	; 4
     a30:	a9 f0       	breq	.+42     	; 0xa5c <LCD_var_str+0x4e>
     a32:	15 30       	cpi	r17, 0x05	; 5
     a34:	09 f0       	breq	.+2      	; 0xa38 <LCD_var_str+0x2a>
     a36:	89 c0       	rjmp	.+274    	; 0xb4a <LCD_var_str+0x13c>
	{
		case 5: LCD_write_char((value/10000)+'0');   // Если нужно перевести цифру 
     a38:	9e 01       	movw	r18, r28
     a3a:	32 95       	swap	r19
     a3c:	22 95       	swap	r18
     a3e:	2f 70       	andi	r18, 0x0F	; 15
     a40:	23 27       	eor	r18, r19
     a42:	3f 70       	andi	r19, 0x0F	; 15
     a44:	23 27       	eor	r18, r19
     a46:	a7 e4       	ldi	r26, 0x47	; 71
     a48:	b3 e0       	ldi	r27, 0x03	; 3
     a4a:	cd d2       	rcall	.+1434   	; 0xfe6 <__umulhisi3>
     a4c:	96 95       	lsr	r25
     a4e:	87 95       	ror	r24
     a50:	96 95       	lsr	r25
     a52:	87 95       	ror	r24
     a54:	96 95       	lsr	r25
     a56:	87 95       	ror	r24
     a58:	80 5d       	subi	r24, 0xD0	; 208
     a5a:	b1 df       	rcall	.-158    	; 0x9be <LCD_write_char>
		case 4: LCD_write_char((value/1000)+'0');   // Если нужно перевести цифру 
     a5c:	9e 01       	movw	r18, r28
     a5e:	36 95       	lsr	r19
     a60:	27 95       	ror	r18
     a62:	36 95       	lsr	r19
     a64:	27 95       	ror	r18
     a66:	36 95       	lsr	r19
     a68:	27 95       	ror	r18
     a6a:	a5 ec       	ldi	r26, 0xC5	; 197
     a6c:	b0 e2       	ldi	r27, 0x20	; 32
     a6e:	bb d2       	rcall	.+1398   	; 0xfe6 <__umulhisi3>
     a70:	92 95       	swap	r25
     a72:	82 95       	swap	r24
     a74:	8f 70       	andi	r24, 0x0F	; 15
     a76:	89 27       	eor	r24, r25
     a78:	9f 70       	andi	r25, 0x0F	; 15
     a7a:	89 27       	eor	r24, r25
     a7c:	80 5d       	subi	r24, 0xD0	; 208
     a7e:	9f df       	rcall	.-194    	; 0x9be <LCD_write_char>
		case 3: LCD_write_char(((value/100)%10)+'0');//в символ, то следует 
     a80:	9e 01       	movw	r18, r28
     a82:	36 95       	lsr	r19
     a84:	27 95       	ror	r18
     a86:	36 95       	lsr	r19
     a88:	27 95       	ror	r18
     a8a:	ab e7       	ldi	r26, 0x7B	; 123
     a8c:	b4 e1       	ldi	r27, 0x14	; 20
     a8e:	ab d2       	rcall	.+1366   	; 0xfe6 <__umulhisi3>
     a90:	ac 01       	movw	r20, r24
     a92:	56 95       	lsr	r21
     a94:	47 95       	ror	r20
     a96:	9a 01       	movw	r18, r20
     a98:	ad ec       	ldi	r26, 0xCD	; 205
     a9a:	bc ec       	ldi	r27, 0xCC	; 204
     a9c:	a4 d2       	rcall	.+1352   	; 0xfe6 <__umulhisi3>
     a9e:	96 95       	lsr	r25
     aa0:	87 95       	ror	r24
     aa2:	96 95       	lsr	r25
     aa4:	87 95       	ror	r24
     aa6:	96 95       	lsr	r25
     aa8:	87 95       	ror	r24
     aaa:	9c 01       	movw	r18, r24
     aac:	22 0f       	add	r18, r18
     aae:	33 1f       	adc	r19, r19
     ab0:	88 0f       	add	r24, r24
     ab2:	99 1f       	adc	r25, r25
     ab4:	88 0f       	add	r24, r24
     ab6:	99 1f       	adc	r25, r25
     ab8:	88 0f       	add	r24, r24
     aba:	99 1f       	adc	r25, r25
     abc:	82 0f       	add	r24, r18
     abe:	93 1f       	adc	r25, r19
     ac0:	9a 01       	movw	r18, r20
     ac2:	28 1b       	sub	r18, r24
     ac4:	39 0b       	sbc	r19, r25
     ac6:	c9 01       	movw	r24, r18
     ac8:	80 5d       	subi	r24, 0xD0	; 208
     aca:	79 df       	rcall	.-270    	; 0x9be <LCD_write_char>
		case 2: LCD_write_char(((value/10)%10)+'0');//добавить к цифре 
     acc:	9e 01       	movw	r18, r28
     ace:	ad ec       	ldi	r26, 0xCD	; 205
     ad0:	bc ec       	ldi	r27, 0xCC	; 204
     ad2:	89 d2       	rcall	.+1298   	; 0xfe6 <__umulhisi3>
     ad4:	ac 01       	movw	r20, r24
     ad6:	56 95       	lsr	r21
     ad8:	47 95       	ror	r20
     ada:	56 95       	lsr	r21
     adc:	47 95       	ror	r20
     ade:	56 95       	lsr	r21
     ae0:	47 95       	ror	r20
     ae2:	9a 01       	movw	r18, r20
     ae4:	80 d2       	rcall	.+1280   	; 0xfe6 <__umulhisi3>
     ae6:	96 95       	lsr	r25
     ae8:	87 95       	ror	r24
     aea:	96 95       	lsr	r25
     aec:	87 95       	ror	r24
     aee:	96 95       	lsr	r25
     af0:	87 95       	ror	r24
     af2:	9c 01       	movw	r18, r24
     af4:	22 0f       	add	r18, r18
     af6:	33 1f       	adc	r19, r19
     af8:	88 0f       	add	r24, r24
     afa:	99 1f       	adc	r25, r25
     afc:	88 0f       	add	r24, r24
     afe:	99 1f       	adc	r25, r25
     b00:	88 0f       	add	r24, r24
     b02:	99 1f       	adc	r25, r25
     b04:	82 0f       	add	r24, r18
     b06:	93 1f       	adc	r25, r19
     b08:	9a 01       	movw	r18, r20
     b0a:	28 1b       	sub	r18, r24
     b0c:	39 0b       	sbc	r19, r25
     b0e:	c9 01       	movw	r24, r18
     b10:	80 5d       	subi	r24, 0xD0	; 208
     b12:	55 df       	rcall	.-342    	; 0x9be <LCD_write_char>
		case 1: LCD_write_char((value%10)+'0');     //символ '0' (или его код 48)
     b14:	9e 01       	movw	r18, r28
     b16:	ad ec       	ldi	r26, 0xCD	; 205
     b18:	bc ec       	ldi	r27, 0xCC	; 204
     b1a:	65 d2       	rcall	.+1226   	; 0xfe6 <__umulhisi3>
     b1c:	96 95       	lsr	r25
     b1e:	87 95       	ror	r24
     b20:	96 95       	lsr	r25
     b22:	87 95       	ror	r24
     b24:	96 95       	lsr	r25
     b26:	87 95       	ror	r24
     b28:	9c 01       	movw	r18, r24
     b2a:	22 0f       	add	r18, r18
     b2c:	33 1f       	adc	r19, r19
     b2e:	88 0f       	add	r24, r24
     b30:	99 1f       	adc	r25, r25
     b32:	88 0f       	add	r24, r24
     b34:	99 1f       	adc	r25, r25
     b36:	88 0f       	add	r24, r24
     b38:	99 1f       	adc	r25, r25
     b3a:	82 0f       	add	r24, r18
     b3c:	93 1f       	adc	r25, r19
     b3e:	9e 01       	movw	r18, r28
     b40:	28 1b       	sub	r18, r24
     b42:	39 0b       	sbc	r19, r25
     b44:	c9 01       	movw	r24, r18
     b46:	80 5d       	subi	r24, 0xD0	; 208
     b48:	3a df       	rcall	.-396    	; 0x9be <LCD_write_char>
	}
}
     b4a:	df 91       	pop	r29
     b4c:	cf 91       	pop	r28
     b4e:	1f 91       	pop	r17
     b50:	08 95       	ret

00000b52 <init_pwm>:

void init_pwm(void)// инициализация портов для ШИМ
{
	// Обязательно сделать порт на выход, но не делать на нём лог 1
//    PORTB = 0b00000000;
	DDRB |= (1 << PB1);
     b52:	21 9a       	sbi	0x04, 1	; 4
//	PORTD = 0b00000000; 
	DDRD |= (1 << PD6);
     b54:	56 9a       	sbi	0x0a, 6	; 10
	
	// ШИМ 0-го канала
	TCCR0A |= ((0 << COM0A1) | (0 << COM0A0) | (0 << COM0B1) | (0 << COM0B0) | (1 << WGM01) | (1 << WGM00)); // FAST PWM
     b56:	84 b5       	in	r24, 0x24	; 36
     b58:	83 60       	ori	r24, 0x03	; 3
     b5a:	84 bd       	out	0x24, r24	; 36
	TCCR0B |= ((0 << FOC0A)  | (0 << FOC0B) | (0 << WGM02) | (0 << CS02) | (1 << CS01) | (0 << CS00));
     b5c:	85 b5       	in	r24, 0x25	; 37
     b5e:	82 60       	ori	r24, 0x02	; 2
     b60:	85 bd       	out	0x25, r24	; 37
	//OCR0A = 0x7D; // Оба работают
	//OCR0B = 0xDC; // на 50% скважности
	
	// ШИМ первого канала  COM1A1 (COM1B1) - включают ШИМ /// COM1A0 (COM1B0) - инвертирует сигнал
	TCCR1A |= ((1 << COM1A1) | (0 << COM1A0) | (0 << COM1B1) | (0 << COM1B0)  | (1 << WGM11) | (1 << WGM10)); 
     b62:	e0 e8       	ldi	r30, 0x80	; 128
     b64:	f0 e0       	ldi	r31, 0x00	; 0
     b66:	80 81       	ld	r24, Z
     b68:	83 68       	ori	r24, 0x83	; 131
     b6a:	80 83       	st	Z, r24
	//Таймер B
	TCCR1B |= ((0 << ICNC1) | (0 << ICES1) | (0 << WGM13) | (1 << WGM12) | (0 << CS12) | (0 << CS11) | (1 << CS10));
     b6c:	e1 e8       	ldi	r30, 0x81	; 129
     b6e:	f0 e0       	ldi	r31, 0x00	; 0
     b70:	80 81       	ld	r24, Z
     b72:	89 60       	ori	r24, 0x09	; 9
     b74:	80 83       	st	Z, r24
	TIMSK1 |= ((0 << ICIE1) | (0 << OCIE1B) | (1 << OCIE1A) | (0 << TOIE1));
     b76:	ef e6       	ldi	r30, 0x6F	; 111
     b78:	f0 e0       	ldi	r31, 0x00	; 0
     b7a:	80 81       	ld	r24, Z
     b7c:	82 60       	ori	r24, 0x02	; 2
     b7e:	80 83       	st	Z, r24
	//OCR1AH = 0b01111010; //записываем в регистр число для сравнения
	//OCR1AL = 0b00010010;

	TCCR1C |= ((0 << FOC1A)  | (0 << FOC1B));
     b80:	e2 e8       	ldi	r30, 0x82	; 130
     b82:	f0 e0       	ldi	r31, 0x00	; 0
     b84:	80 81       	ld	r24, Z
     b86:	80 83       	st	Z, r24
     b88:	08 95       	ret

00000b8a <__divsf3>:
     b8a:	0c d0       	rcall	.+24     	; 0xba4 <__divsf3x>
     b8c:	42 c1       	rjmp	.+644    	; 0xe12 <__fp_round>
     b8e:	3a d1       	rcall	.+628    	; 0xe04 <__fp_pscB>
     b90:	40 f0       	brcs	.+16     	; 0xba2 <__divsf3+0x18>
     b92:	31 d1       	rcall	.+610    	; 0xdf6 <__fp_pscA>
     b94:	30 f0       	brcs	.+12     	; 0xba2 <__divsf3+0x18>
     b96:	21 f4       	brne	.+8      	; 0xba0 <__divsf3+0x16>
     b98:	5f 3f       	cpi	r21, 0xFF	; 255
     b9a:	19 f0       	breq	.+6      	; 0xba2 <__divsf3+0x18>
     b9c:	15 c1       	rjmp	.+554    	; 0xdc8 <__fp_inf>
     b9e:	51 11       	cpse	r21, r1
     ba0:	6c c1       	rjmp	.+728    	; 0xe7a <__fp_szero>
     ba2:	26 c1       	rjmp	.+588    	; 0xdf0 <__fp_nan>

00000ba4 <__divsf3x>:
     ba4:	47 d1       	rcall	.+654    	; 0xe34 <__fp_split3>
     ba6:	98 f3       	brcs	.-26     	; 0xb8e <__divsf3+0x4>

00000ba8 <__divsf3_pse>:
     ba8:	99 23       	and	r25, r25
     baa:	c9 f3       	breq	.-14     	; 0xb9e <__divsf3+0x14>
     bac:	55 23       	and	r21, r21
     bae:	b1 f3       	breq	.-20     	; 0xb9c <__divsf3+0x12>
     bb0:	95 1b       	sub	r25, r21
     bb2:	55 0b       	sbc	r21, r21
     bb4:	bb 27       	eor	r27, r27
     bb6:	aa 27       	eor	r26, r26
     bb8:	62 17       	cp	r22, r18
     bba:	73 07       	cpc	r23, r19
     bbc:	84 07       	cpc	r24, r20
     bbe:	38 f0       	brcs	.+14     	; 0xbce <__divsf3_pse+0x26>
     bc0:	9f 5f       	subi	r25, 0xFF	; 255
     bc2:	5f 4f       	sbci	r21, 0xFF	; 255
     bc4:	22 0f       	add	r18, r18
     bc6:	33 1f       	adc	r19, r19
     bc8:	44 1f       	adc	r20, r20
     bca:	aa 1f       	adc	r26, r26
     bcc:	a9 f3       	breq	.-22     	; 0xbb8 <__divsf3_pse+0x10>
     bce:	33 d0       	rcall	.+102    	; 0xc36 <__divsf3_pse+0x8e>
     bd0:	0e 2e       	mov	r0, r30
     bd2:	3a f0       	brmi	.+14     	; 0xbe2 <__divsf3_pse+0x3a>
     bd4:	e0 e8       	ldi	r30, 0x80	; 128
     bd6:	30 d0       	rcall	.+96     	; 0xc38 <__divsf3_pse+0x90>
     bd8:	91 50       	subi	r25, 0x01	; 1
     bda:	50 40       	sbci	r21, 0x00	; 0
     bdc:	e6 95       	lsr	r30
     bde:	00 1c       	adc	r0, r0
     be0:	ca f7       	brpl	.-14     	; 0xbd4 <__divsf3_pse+0x2c>
     be2:	29 d0       	rcall	.+82     	; 0xc36 <__divsf3_pse+0x8e>
     be4:	fe 2f       	mov	r31, r30
     be6:	27 d0       	rcall	.+78     	; 0xc36 <__divsf3_pse+0x8e>
     be8:	66 0f       	add	r22, r22
     bea:	77 1f       	adc	r23, r23
     bec:	88 1f       	adc	r24, r24
     bee:	bb 1f       	adc	r27, r27
     bf0:	26 17       	cp	r18, r22
     bf2:	37 07       	cpc	r19, r23
     bf4:	48 07       	cpc	r20, r24
     bf6:	ab 07       	cpc	r26, r27
     bf8:	b0 e8       	ldi	r27, 0x80	; 128
     bfa:	09 f0       	breq	.+2      	; 0xbfe <__divsf3_pse+0x56>
     bfc:	bb 0b       	sbc	r27, r27
     bfe:	80 2d       	mov	r24, r0
     c00:	bf 01       	movw	r22, r30
     c02:	ff 27       	eor	r31, r31
     c04:	93 58       	subi	r25, 0x83	; 131
     c06:	5f 4f       	sbci	r21, 0xFF	; 255
     c08:	2a f0       	brmi	.+10     	; 0xc14 <__divsf3_pse+0x6c>
     c0a:	9e 3f       	cpi	r25, 0xFE	; 254
     c0c:	51 05       	cpc	r21, r1
     c0e:	68 f0       	brcs	.+26     	; 0xc2a <__divsf3_pse+0x82>
     c10:	db c0       	rjmp	.+438    	; 0xdc8 <__fp_inf>
     c12:	33 c1       	rjmp	.+614    	; 0xe7a <__fp_szero>
     c14:	5f 3f       	cpi	r21, 0xFF	; 255
     c16:	ec f3       	brlt	.-6      	; 0xc12 <__divsf3_pse+0x6a>
     c18:	98 3e       	cpi	r25, 0xE8	; 232
     c1a:	dc f3       	brlt	.-10     	; 0xc12 <__divsf3_pse+0x6a>
     c1c:	86 95       	lsr	r24
     c1e:	77 95       	ror	r23
     c20:	67 95       	ror	r22
     c22:	b7 95       	ror	r27
     c24:	f7 95       	ror	r31
     c26:	9f 5f       	subi	r25, 0xFF	; 255
     c28:	c9 f7       	brne	.-14     	; 0xc1c <__divsf3_pse+0x74>
     c2a:	88 0f       	add	r24, r24
     c2c:	91 1d       	adc	r25, r1
     c2e:	96 95       	lsr	r25
     c30:	87 95       	ror	r24
     c32:	97 f9       	bld	r25, 7
     c34:	08 95       	ret
     c36:	e1 e0       	ldi	r30, 0x01	; 1
     c38:	66 0f       	add	r22, r22
     c3a:	77 1f       	adc	r23, r23
     c3c:	88 1f       	adc	r24, r24
     c3e:	bb 1f       	adc	r27, r27
     c40:	62 17       	cp	r22, r18
     c42:	73 07       	cpc	r23, r19
     c44:	84 07       	cpc	r24, r20
     c46:	ba 07       	cpc	r27, r26
     c48:	20 f0       	brcs	.+8      	; 0xc52 <__divsf3_pse+0xaa>
     c4a:	62 1b       	sub	r22, r18
     c4c:	73 0b       	sbc	r23, r19
     c4e:	84 0b       	sbc	r24, r20
     c50:	ba 0b       	sbc	r27, r26
     c52:	ee 1f       	adc	r30, r30
     c54:	88 f7       	brcc	.-30     	; 0xc38 <__divsf3_pse+0x90>
     c56:	e0 95       	com	r30
     c58:	08 95       	ret

00000c5a <__fixunssfsi>:
     c5a:	f4 d0       	rcall	.+488    	; 0xe44 <__fp_splitA>
     c5c:	88 f0       	brcs	.+34     	; 0xc80 <__fixunssfsi+0x26>
     c5e:	9f 57       	subi	r25, 0x7F	; 127
     c60:	90 f0       	brcs	.+36     	; 0xc86 <__fixunssfsi+0x2c>
     c62:	b9 2f       	mov	r27, r25
     c64:	99 27       	eor	r25, r25
     c66:	b7 51       	subi	r27, 0x17	; 23
     c68:	a0 f0       	brcs	.+40     	; 0xc92 <__fixunssfsi+0x38>
     c6a:	d1 f0       	breq	.+52     	; 0xca0 <__fixunssfsi+0x46>
     c6c:	66 0f       	add	r22, r22
     c6e:	77 1f       	adc	r23, r23
     c70:	88 1f       	adc	r24, r24
     c72:	99 1f       	adc	r25, r25
     c74:	1a f0       	brmi	.+6      	; 0xc7c <__fixunssfsi+0x22>
     c76:	ba 95       	dec	r27
     c78:	c9 f7       	brne	.-14     	; 0xc6c <__fixunssfsi+0x12>
     c7a:	12 c0       	rjmp	.+36     	; 0xca0 <__fixunssfsi+0x46>
     c7c:	b1 30       	cpi	r27, 0x01	; 1
     c7e:	81 f0       	breq	.+32     	; 0xca0 <__fixunssfsi+0x46>
     c80:	fb d0       	rcall	.+502    	; 0xe78 <__fp_zero>
     c82:	b1 e0       	ldi	r27, 0x01	; 1
     c84:	08 95       	ret
     c86:	f8 c0       	rjmp	.+496    	; 0xe78 <__fp_zero>
     c88:	67 2f       	mov	r22, r23
     c8a:	78 2f       	mov	r23, r24
     c8c:	88 27       	eor	r24, r24
     c8e:	b8 5f       	subi	r27, 0xF8	; 248
     c90:	39 f0       	breq	.+14     	; 0xca0 <__fixunssfsi+0x46>
     c92:	b9 3f       	cpi	r27, 0xF9	; 249
     c94:	cc f3       	brlt	.-14     	; 0xc88 <__fixunssfsi+0x2e>
     c96:	86 95       	lsr	r24
     c98:	77 95       	ror	r23
     c9a:	67 95       	ror	r22
     c9c:	b3 95       	inc	r27
     c9e:	d9 f7       	brne	.-10     	; 0xc96 <__fixunssfsi+0x3c>
     ca0:	3e f4       	brtc	.+14     	; 0xcb0 <__fixunssfsi+0x56>
     ca2:	90 95       	com	r25
     ca4:	80 95       	com	r24
     ca6:	70 95       	com	r23
     ca8:	61 95       	neg	r22
     caa:	7f 4f       	sbci	r23, 0xFF	; 255
     cac:	8f 4f       	sbci	r24, 0xFF	; 255
     cae:	9f 4f       	sbci	r25, 0xFF	; 255
     cb0:	08 95       	ret

00000cb2 <__floatunsisf>:
     cb2:	e8 94       	clt
     cb4:	09 c0       	rjmp	.+18     	; 0xcc8 <__floatsisf+0x12>

00000cb6 <__floatsisf>:
     cb6:	97 fb       	bst	r25, 7
     cb8:	3e f4       	brtc	.+14     	; 0xcc8 <__floatsisf+0x12>
     cba:	90 95       	com	r25
     cbc:	80 95       	com	r24
     cbe:	70 95       	com	r23
     cc0:	61 95       	neg	r22
     cc2:	7f 4f       	sbci	r23, 0xFF	; 255
     cc4:	8f 4f       	sbci	r24, 0xFF	; 255
     cc6:	9f 4f       	sbci	r25, 0xFF	; 255
     cc8:	99 23       	and	r25, r25
     cca:	a9 f0       	breq	.+42     	; 0xcf6 <__floatsisf+0x40>
     ccc:	f9 2f       	mov	r31, r25
     cce:	96 e9       	ldi	r25, 0x96	; 150
     cd0:	bb 27       	eor	r27, r27
     cd2:	93 95       	inc	r25
     cd4:	f6 95       	lsr	r31
     cd6:	87 95       	ror	r24
     cd8:	77 95       	ror	r23
     cda:	67 95       	ror	r22
     cdc:	b7 95       	ror	r27
     cde:	f1 11       	cpse	r31, r1
     ce0:	f8 cf       	rjmp	.-16     	; 0xcd2 <__floatsisf+0x1c>
     ce2:	fa f4       	brpl	.+62     	; 0xd22 <__floatsisf+0x6c>
     ce4:	bb 0f       	add	r27, r27
     ce6:	11 f4       	brne	.+4      	; 0xcec <__floatsisf+0x36>
     ce8:	60 ff       	sbrs	r22, 0
     cea:	1b c0       	rjmp	.+54     	; 0xd22 <__floatsisf+0x6c>
     cec:	6f 5f       	subi	r22, 0xFF	; 255
     cee:	7f 4f       	sbci	r23, 0xFF	; 255
     cf0:	8f 4f       	sbci	r24, 0xFF	; 255
     cf2:	9f 4f       	sbci	r25, 0xFF	; 255
     cf4:	16 c0       	rjmp	.+44     	; 0xd22 <__floatsisf+0x6c>
     cf6:	88 23       	and	r24, r24
     cf8:	11 f0       	breq	.+4      	; 0xcfe <__floatsisf+0x48>
     cfa:	96 e9       	ldi	r25, 0x96	; 150
     cfc:	11 c0       	rjmp	.+34     	; 0xd20 <__floatsisf+0x6a>
     cfe:	77 23       	and	r23, r23
     d00:	21 f0       	breq	.+8      	; 0xd0a <__floatsisf+0x54>
     d02:	9e e8       	ldi	r25, 0x8E	; 142
     d04:	87 2f       	mov	r24, r23
     d06:	76 2f       	mov	r23, r22
     d08:	05 c0       	rjmp	.+10     	; 0xd14 <__floatsisf+0x5e>
     d0a:	66 23       	and	r22, r22
     d0c:	71 f0       	breq	.+28     	; 0xd2a <__floatsisf+0x74>
     d0e:	96 e8       	ldi	r25, 0x86	; 134
     d10:	86 2f       	mov	r24, r22
     d12:	70 e0       	ldi	r23, 0x00	; 0
     d14:	60 e0       	ldi	r22, 0x00	; 0
     d16:	2a f0       	brmi	.+10     	; 0xd22 <__floatsisf+0x6c>
     d18:	9a 95       	dec	r25
     d1a:	66 0f       	add	r22, r22
     d1c:	77 1f       	adc	r23, r23
     d1e:	88 1f       	adc	r24, r24
     d20:	da f7       	brpl	.-10     	; 0xd18 <__floatsisf+0x62>
     d22:	88 0f       	add	r24, r24
     d24:	96 95       	lsr	r25
     d26:	87 95       	ror	r24
     d28:	97 f9       	bld	r25, 7
     d2a:	08 95       	ret
     d2c:	64 d0       	rcall	.+200    	; 0xdf6 <__fp_pscA>
     d2e:	18 f0       	brcs	.+6      	; 0xd36 <__floatsisf+0x80>
     d30:	11 f0       	breq	.+4      	; 0xd36 <__floatsisf+0x80>
     d32:	68 d0       	rcall	.+208    	; 0xe04 <__fp_pscB>
     d34:	38 f4       	brcc	.+14     	; 0xd44 <fmod+0xa>
     d36:	5c c0       	rjmp	.+184    	; 0xdf0 <__fp_nan>
     d38:	a0 c0       	rjmp	.+320    	; 0xe7a <__fp_szero>

00000d3a <fmod>:
     d3a:	e9 2f       	mov	r30, r25
     d3c:	7b d0       	rcall	.+246    	; 0xe34 <__fp_split3>
     d3e:	b0 f3       	brcs	.-20     	; 0xd2c <__floatsisf+0x76>
     d40:	55 23       	and	r21, r21
     d42:	c9 f3       	breq	.-14     	; 0xd36 <__floatsisf+0x80>
     d44:	e7 fb       	bst	r30, 7
     d46:	62 17       	cp	r22, r18
     d48:	73 07       	cpc	r23, r19
     d4a:	84 07       	cpc	r24, r20
     d4c:	95 07       	cpc	r25, r21
     d4e:	a8 f1       	brcs	.+106    	; 0xdba <fmod+0x80>
     d50:	99 f3       	breq	.-26     	; 0xd38 <__floatsisf+0x82>
     d52:	e9 2f       	mov	r30, r25
     d54:	ff 27       	eor	r31, r31
     d56:	88 23       	and	r24, r24
     d58:	2a f0       	brmi	.+10     	; 0xd64 <fmod+0x2a>
     d5a:	31 97       	sbiw	r30, 0x01	; 1
     d5c:	66 0f       	add	r22, r22
     d5e:	77 1f       	adc	r23, r23
     d60:	88 1f       	adc	r24, r24
     d62:	da f7       	brpl	.-10     	; 0xd5a <fmod+0x20>
     d64:	95 2f       	mov	r25, r21
     d66:	55 27       	eor	r21, r21
     d68:	44 23       	and	r20, r20
     d6a:	32 f0       	brmi	.+12     	; 0xd78 <fmod+0x3e>
     d6c:	91 50       	subi	r25, 0x01	; 1
     d6e:	50 40       	sbci	r21, 0x00	; 0
     d70:	22 0f       	add	r18, r18
     d72:	33 1f       	adc	r19, r19
     d74:	44 1f       	adc	r20, r20
     d76:	d2 f7       	brpl	.-12     	; 0xd6c <fmod+0x32>
     d78:	bb 27       	eor	r27, r27
     d7a:	e9 1b       	sub	r30, r25
     d7c:	f5 0b       	sbc	r31, r21
     d7e:	62 1b       	sub	r22, r18
     d80:	73 0b       	sbc	r23, r19
     d82:	84 0b       	sbc	r24, r20
     d84:	b1 09       	sbc	r27, r1
     d86:	c1 f2       	breq	.-80     	; 0xd38 <__floatsisf+0x82>
     d88:	22 f4       	brpl	.+8      	; 0xd92 <fmod+0x58>
     d8a:	62 0f       	add	r22, r18
     d8c:	73 1f       	adc	r23, r19
     d8e:	84 1f       	adc	r24, r20
     d90:	b1 1d       	adc	r27, r1
     d92:	31 97       	sbiw	r30, 0x01	; 1
     d94:	2a f0       	brmi	.+10     	; 0xda0 <fmod+0x66>
     d96:	66 0f       	add	r22, r22
     d98:	77 1f       	adc	r23, r23
     d9a:	88 1f       	adc	r24, r24
     d9c:	bb 1f       	adc	r27, r27
     d9e:	ef cf       	rjmp	.-34     	; 0xd7e <fmod+0x44>
     da0:	91 50       	subi	r25, 0x01	; 1
     da2:	50 40       	sbci	r21, 0x00	; 0
     da4:	5a f0       	brmi	.+22     	; 0xdbc <fmod+0x82>
     da6:	41 f0       	breq	.+16     	; 0xdb8 <fmod+0x7e>
     da8:	88 23       	and	r24, r24
     daa:	32 f0       	brmi	.+12     	; 0xdb8 <fmod+0x7e>
     dac:	66 0f       	add	r22, r22
     dae:	77 1f       	adc	r23, r23
     db0:	88 1f       	adc	r24, r24
     db2:	91 50       	subi	r25, 0x01	; 1
     db4:	50 40       	sbci	r21, 0x00	; 0
     db6:	c1 f7       	brne	.-16     	; 0xda8 <fmod+0x6e>
     db8:	93 95       	inc	r25
     dba:	0c c0       	rjmp	.+24     	; 0xdd4 <__fp_mpack>
     dbc:	86 95       	lsr	r24
     dbe:	77 95       	ror	r23
     dc0:	67 95       	ror	r22
     dc2:	9f 5f       	subi	r25, 0xFF	; 255
     dc4:	d9 f7       	brne	.-10     	; 0xdbc <fmod+0x82>
     dc6:	f8 cf       	rjmp	.-16     	; 0xdb8 <fmod+0x7e>

00000dc8 <__fp_inf>:
     dc8:	97 f9       	bld	r25, 7
     dca:	9f 67       	ori	r25, 0x7F	; 127
     dcc:	80 e8       	ldi	r24, 0x80	; 128
     dce:	70 e0       	ldi	r23, 0x00	; 0
     dd0:	60 e0       	ldi	r22, 0x00	; 0
     dd2:	08 95       	ret

00000dd4 <__fp_mpack>:
     dd4:	9f 3f       	cpi	r25, 0xFF	; 255
     dd6:	31 f0       	breq	.+12     	; 0xde4 <__fp_mpack_finite+0xc>

00000dd8 <__fp_mpack_finite>:
     dd8:	91 50       	subi	r25, 0x01	; 1
     dda:	20 f4       	brcc	.+8      	; 0xde4 <__fp_mpack_finite+0xc>
     ddc:	87 95       	ror	r24
     dde:	77 95       	ror	r23
     de0:	67 95       	ror	r22
     de2:	b7 95       	ror	r27
     de4:	88 0f       	add	r24, r24
     de6:	91 1d       	adc	r25, r1
     de8:	96 95       	lsr	r25
     dea:	87 95       	ror	r24
     dec:	97 f9       	bld	r25, 7
     dee:	08 95       	ret

00000df0 <__fp_nan>:
     df0:	9f ef       	ldi	r25, 0xFF	; 255
     df2:	80 ec       	ldi	r24, 0xC0	; 192
     df4:	08 95       	ret

00000df6 <__fp_pscA>:
     df6:	00 24       	eor	r0, r0
     df8:	0a 94       	dec	r0
     dfa:	16 16       	cp	r1, r22
     dfc:	17 06       	cpc	r1, r23
     dfe:	18 06       	cpc	r1, r24
     e00:	09 06       	cpc	r0, r25
     e02:	08 95       	ret

00000e04 <__fp_pscB>:
     e04:	00 24       	eor	r0, r0
     e06:	0a 94       	dec	r0
     e08:	12 16       	cp	r1, r18
     e0a:	13 06       	cpc	r1, r19
     e0c:	14 06       	cpc	r1, r20
     e0e:	05 06       	cpc	r0, r21
     e10:	08 95       	ret

00000e12 <__fp_round>:
     e12:	09 2e       	mov	r0, r25
     e14:	03 94       	inc	r0
     e16:	00 0c       	add	r0, r0
     e18:	11 f4       	brne	.+4      	; 0xe1e <__fp_round+0xc>
     e1a:	88 23       	and	r24, r24
     e1c:	52 f0       	brmi	.+20     	; 0xe32 <__fp_round+0x20>
     e1e:	bb 0f       	add	r27, r27
     e20:	40 f4       	brcc	.+16     	; 0xe32 <__fp_round+0x20>
     e22:	bf 2b       	or	r27, r31
     e24:	11 f4       	brne	.+4      	; 0xe2a <__fp_round+0x18>
     e26:	60 ff       	sbrs	r22, 0
     e28:	04 c0       	rjmp	.+8      	; 0xe32 <__fp_round+0x20>
     e2a:	6f 5f       	subi	r22, 0xFF	; 255
     e2c:	7f 4f       	sbci	r23, 0xFF	; 255
     e2e:	8f 4f       	sbci	r24, 0xFF	; 255
     e30:	9f 4f       	sbci	r25, 0xFF	; 255
     e32:	08 95       	ret

00000e34 <__fp_split3>:
     e34:	57 fd       	sbrc	r21, 7
     e36:	90 58       	subi	r25, 0x80	; 128
     e38:	44 0f       	add	r20, r20
     e3a:	55 1f       	adc	r21, r21
     e3c:	59 f0       	breq	.+22     	; 0xe54 <__fp_splitA+0x10>
     e3e:	5f 3f       	cpi	r21, 0xFF	; 255
     e40:	71 f0       	breq	.+28     	; 0xe5e <__fp_splitA+0x1a>
     e42:	47 95       	ror	r20

00000e44 <__fp_splitA>:
     e44:	88 0f       	add	r24, r24
     e46:	97 fb       	bst	r25, 7
     e48:	99 1f       	adc	r25, r25
     e4a:	61 f0       	breq	.+24     	; 0xe64 <__fp_splitA+0x20>
     e4c:	9f 3f       	cpi	r25, 0xFF	; 255
     e4e:	79 f0       	breq	.+30     	; 0xe6e <__fp_splitA+0x2a>
     e50:	87 95       	ror	r24
     e52:	08 95       	ret
     e54:	12 16       	cp	r1, r18
     e56:	13 06       	cpc	r1, r19
     e58:	14 06       	cpc	r1, r20
     e5a:	55 1f       	adc	r21, r21
     e5c:	f2 cf       	rjmp	.-28     	; 0xe42 <__fp_split3+0xe>
     e5e:	46 95       	lsr	r20
     e60:	f1 df       	rcall	.-30     	; 0xe44 <__fp_splitA>
     e62:	08 c0       	rjmp	.+16     	; 0xe74 <__fp_splitA+0x30>
     e64:	16 16       	cp	r1, r22
     e66:	17 06       	cpc	r1, r23
     e68:	18 06       	cpc	r1, r24
     e6a:	99 1f       	adc	r25, r25
     e6c:	f1 cf       	rjmp	.-30     	; 0xe50 <__fp_splitA+0xc>
     e6e:	86 95       	lsr	r24
     e70:	71 05       	cpc	r23, r1
     e72:	61 05       	cpc	r22, r1
     e74:	08 94       	sec
     e76:	08 95       	ret

00000e78 <__fp_zero>:
     e78:	e8 94       	clt

00000e7a <__fp_szero>:
     e7a:	bb 27       	eor	r27, r27
     e7c:	66 27       	eor	r22, r22
     e7e:	77 27       	eor	r23, r23
     e80:	cb 01       	movw	r24, r22
     e82:	97 f9       	bld	r25, 7
     e84:	08 95       	ret

00000e86 <__mulsf3>:
     e86:	0b d0       	rcall	.+22     	; 0xe9e <__mulsf3x>
     e88:	c4 cf       	rjmp	.-120    	; 0xe12 <__fp_round>
     e8a:	b5 df       	rcall	.-150    	; 0xdf6 <__fp_pscA>
     e8c:	28 f0       	brcs	.+10     	; 0xe98 <__mulsf3+0x12>
     e8e:	ba df       	rcall	.-140    	; 0xe04 <__fp_pscB>
     e90:	18 f0       	brcs	.+6      	; 0xe98 <__mulsf3+0x12>
     e92:	95 23       	and	r25, r21
     e94:	09 f0       	breq	.+2      	; 0xe98 <__mulsf3+0x12>
     e96:	98 cf       	rjmp	.-208    	; 0xdc8 <__fp_inf>
     e98:	ab cf       	rjmp	.-170    	; 0xdf0 <__fp_nan>
     e9a:	11 24       	eor	r1, r1
     e9c:	ee cf       	rjmp	.-36     	; 0xe7a <__fp_szero>

00000e9e <__mulsf3x>:
     e9e:	ca df       	rcall	.-108    	; 0xe34 <__fp_split3>
     ea0:	a0 f3       	brcs	.-24     	; 0xe8a <__mulsf3+0x4>

00000ea2 <__mulsf3_pse>:
     ea2:	95 9f       	mul	r25, r21
     ea4:	d1 f3       	breq	.-12     	; 0xe9a <__mulsf3+0x14>
     ea6:	95 0f       	add	r25, r21
     ea8:	50 e0       	ldi	r21, 0x00	; 0
     eaa:	55 1f       	adc	r21, r21
     eac:	62 9f       	mul	r22, r18
     eae:	f0 01       	movw	r30, r0
     eb0:	72 9f       	mul	r23, r18
     eb2:	bb 27       	eor	r27, r27
     eb4:	f0 0d       	add	r31, r0
     eb6:	b1 1d       	adc	r27, r1
     eb8:	63 9f       	mul	r22, r19
     eba:	aa 27       	eor	r26, r26
     ebc:	f0 0d       	add	r31, r0
     ebe:	b1 1d       	adc	r27, r1
     ec0:	aa 1f       	adc	r26, r26
     ec2:	64 9f       	mul	r22, r20
     ec4:	66 27       	eor	r22, r22
     ec6:	b0 0d       	add	r27, r0
     ec8:	a1 1d       	adc	r26, r1
     eca:	66 1f       	adc	r22, r22
     ecc:	82 9f       	mul	r24, r18
     ece:	22 27       	eor	r18, r18
     ed0:	b0 0d       	add	r27, r0
     ed2:	a1 1d       	adc	r26, r1
     ed4:	62 1f       	adc	r22, r18
     ed6:	73 9f       	mul	r23, r19
     ed8:	b0 0d       	add	r27, r0
     eda:	a1 1d       	adc	r26, r1
     edc:	62 1f       	adc	r22, r18
     ede:	83 9f       	mul	r24, r19
     ee0:	a0 0d       	add	r26, r0
     ee2:	61 1d       	adc	r22, r1
     ee4:	22 1f       	adc	r18, r18
     ee6:	74 9f       	mul	r23, r20
     ee8:	33 27       	eor	r19, r19
     eea:	a0 0d       	add	r26, r0
     eec:	61 1d       	adc	r22, r1
     eee:	23 1f       	adc	r18, r19
     ef0:	84 9f       	mul	r24, r20
     ef2:	60 0d       	add	r22, r0
     ef4:	21 1d       	adc	r18, r1
     ef6:	82 2f       	mov	r24, r18
     ef8:	76 2f       	mov	r23, r22
     efa:	6a 2f       	mov	r22, r26
     efc:	11 24       	eor	r1, r1
     efe:	9f 57       	subi	r25, 0x7F	; 127
     f00:	50 40       	sbci	r21, 0x00	; 0
     f02:	8a f0       	brmi	.+34     	; 0xf26 <__mulsf3_pse+0x84>
     f04:	e1 f0       	breq	.+56     	; 0xf3e <__mulsf3_pse+0x9c>
     f06:	88 23       	and	r24, r24
     f08:	4a f0       	brmi	.+18     	; 0xf1c <__mulsf3_pse+0x7a>
     f0a:	ee 0f       	add	r30, r30
     f0c:	ff 1f       	adc	r31, r31
     f0e:	bb 1f       	adc	r27, r27
     f10:	66 1f       	adc	r22, r22
     f12:	77 1f       	adc	r23, r23
     f14:	88 1f       	adc	r24, r24
     f16:	91 50       	subi	r25, 0x01	; 1
     f18:	50 40       	sbci	r21, 0x00	; 0
     f1a:	a9 f7       	brne	.-22     	; 0xf06 <__mulsf3_pse+0x64>
     f1c:	9e 3f       	cpi	r25, 0xFE	; 254
     f1e:	51 05       	cpc	r21, r1
     f20:	70 f0       	brcs	.+28     	; 0xf3e <__mulsf3_pse+0x9c>
     f22:	52 cf       	rjmp	.-348    	; 0xdc8 <__fp_inf>
     f24:	aa cf       	rjmp	.-172    	; 0xe7a <__fp_szero>
     f26:	5f 3f       	cpi	r21, 0xFF	; 255
     f28:	ec f3       	brlt	.-6      	; 0xf24 <__mulsf3_pse+0x82>
     f2a:	98 3e       	cpi	r25, 0xE8	; 232
     f2c:	dc f3       	brlt	.-10     	; 0xf24 <__mulsf3_pse+0x82>
     f2e:	86 95       	lsr	r24
     f30:	77 95       	ror	r23
     f32:	67 95       	ror	r22
     f34:	b7 95       	ror	r27
     f36:	f7 95       	ror	r31
     f38:	e7 95       	ror	r30
     f3a:	9f 5f       	subi	r25, 0xFF	; 255
     f3c:	c1 f7       	brne	.-16     	; 0xf2e <__mulsf3_pse+0x8c>
     f3e:	fe 2b       	or	r31, r30
     f40:	88 0f       	add	r24, r24
     f42:	91 1d       	adc	r25, r1
     f44:	96 95       	lsr	r25
     f46:	87 95       	ror	r24
     f48:	97 f9       	bld	r25, 7
     f4a:	08 95       	ret

00000f4c <__mulsi3>:
     f4c:	db 01       	movw	r26, r22
     f4e:	8f 93       	push	r24
     f50:	9f 93       	push	r25
     f52:	55 d0       	rcall	.+170    	; 0xffe <__muluhisi3>
     f54:	bf 91       	pop	r27
     f56:	af 91       	pop	r26
     f58:	a2 9f       	mul	r26, r18
     f5a:	80 0d       	add	r24, r0
     f5c:	91 1d       	adc	r25, r1
     f5e:	a3 9f       	mul	r26, r19
     f60:	90 0d       	add	r25, r0
     f62:	b2 9f       	mul	r27, r18
     f64:	90 0d       	add	r25, r0
     f66:	11 24       	eor	r1, r1
     f68:	08 95       	ret

00000f6a <__udivmodsi4>:
     f6a:	a1 e2       	ldi	r26, 0x21	; 33
     f6c:	1a 2e       	mov	r1, r26
     f6e:	aa 1b       	sub	r26, r26
     f70:	bb 1b       	sub	r27, r27
     f72:	fd 01       	movw	r30, r26
     f74:	0d c0       	rjmp	.+26     	; 0xf90 <__udivmodsi4_ep>

00000f76 <__udivmodsi4_loop>:
     f76:	aa 1f       	adc	r26, r26
     f78:	bb 1f       	adc	r27, r27
     f7a:	ee 1f       	adc	r30, r30
     f7c:	ff 1f       	adc	r31, r31
     f7e:	a2 17       	cp	r26, r18
     f80:	b3 07       	cpc	r27, r19
     f82:	e4 07       	cpc	r30, r20
     f84:	f5 07       	cpc	r31, r21
     f86:	20 f0       	brcs	.+8      	; 0xf90 <__udivmodsi4_ep>
     f88:	a2 1b       	sub	r26, r18
     f8a:	b3 0b       	sbc	r27, r19
     f8c:	e4 0b       	sbc	r30, r20
     f8e:	f5 0b       	sbc	r31, r21

00000f90 <__udivmodsi4_ep>:
     f90:	66 1f       	adc	r22, r22
     f92:	77 1f       	adc	r23, r23
     f94:	88 1f       	adc	r24, r24
     f96:	99 1f       	adc	r25, r25
     f98:	1a 94       	dec	r1
     f9a:	69 f7       	brne	.-38     	; 0xf76 <__udivmodsi4_loop>
     f9c:	60 95       	com	r22
     f9e:	70 95       	com	r23
     fa0:	80 95       	com	r24
     fa2:	90 95       	com	r25
     fa4:	9b 01       	movw	r18, r22
     fa6:	ac 01       	movw	r20, r24
     fa8:	bd 01       	movw	r22, r26
     faa:	cf 01       	movw	r24, r30
     fac:	08 95       	ret

00000fae <__divmodsi4>:
     fae:	05 2e       	mov	r0, r21
     fb0:	97 fb       	bst	r25, 7
     fb2:	16 f4       	brtc	.+4      	; 0xfb8 <__divmodsi4+0xa>
     fb4:	00 94       	com	r0
     fb6:	0f d0       	rcall	.+30     	; 0xfd6 <__negsi2>
     fb8:	57 fd       	sbrc	r21, 7
     fba:	05 d0       	rcall	.+10     	; 0xfc6 <__divmodsi4_neg2>
     fbc:	d6 df       	rcall	.-84     	; 0xf6a <__udivmodsi4>
     fbe:	07 fc       	sbrc	r0, 7
     fc0:	02 d0       	rcall	.+4      	; 0xfc6 <__divmodsi4_neg2>
     fc2:	46 f4       	brtc	.+16     	; 0xfd4 <__divmodsi4_exit>
     fc4:	08 c0       	rjmp	.+16     	; 0xfd6 <__negsi2>

00000fc6 <__divmodsi4_neg2>:
     fc6:	50 95       	com	r21
     fc8:	40 95       	com	r20
     fca:	30 95       	com	r19
     fcc:	21 95       	neg	r18
     fce:	3f 4f       	sbci	r19, 0xFF	; 255
     fd0:	4f 4f       	sbci	r20, 0xFF	; 255
     fd2:	5f 4f       	sbci	r21, 0xFF	; 255

00000fd4 <__divmodsi4_exit>:
     fd4:	08 95       	ret

00000fd6 <__negsi2>:
     fd6:	90 95       	com	r25
     fd8:	80 95       	com	r24
     fda:	70 95       	com	r23
     fdc:	61 95       	neg	r22
     fde:	7f 4f       	sbci	r23, 0xFF	; 255
     fe0:	8f 4f       	sbci	r24, 0xFF	; 255
     fe2:	9f 4f       	sbci	r25, 0xFF	; 255
     fe4:	08 95       	ret

00000fe6 <__umulhisi3>:
     fe6:	a2 9f       	mul	r26, r18
     fe8:	b0 01       	movw	r22, r0
     fea:	b3 9f       	mul	r27, r19
     fec:	c0 01       	movw	r24, r0
     fee:	a3 9f       	mul	r26, r19
     ff0:	01 d0       	rcall	.+2      	; 0xff4 <__umulhisi3+0xe>
     ff2:	b2 9f       	mul	r27, r18
     ff4:	70 0d       	add	r23, r0
     ff6:	81 1d       	adc	r24, r1
     ff8:	11 24       	eor	r1, r1
     ffa:	91 1d       	adc	r25, r1
     ffc:	08 95       	ret

00000ffe <__muluhisi3>:
     ffe:	f3 df       	rcall	.-26     	; 0xfe6 <__umulhisi3>
    1000:	a5 9f       	mul	r26, r21
    1002:	90 0d       	add	r25, r0
    1004:	b4 9f       	mul	r27, r20
    1006:	90 0d       	add	r25, r0
    1008:	a4 9f       	mul	r26, r20
    100a:	80 0d       	add	r24, r0
    100c:	91 1d       	adc	r25, r1
    100e:	11 24       	eor	r1, r1
    1010:	08 95       	ret

00001012 <__mulshisi3>:
    1012:	b7 ff       	sbrs	r27, 7
    1014:	f4 cf       	rjmp	.-24     	; 0xffe <__muluhisi3>

00001016 <__mulohisi3>:
    1016:	f3 df       	rcall	.-26     	; 0xffe <__muluhisi3>
    1018:	82 1b       	sub	r24, r18
    101a:	93 0b       	sbc	r25, r19
    101c:	08 95       	ret

0000101e <_exit>:
    101e:	f8 94       	cli

00001020 <__stop_program>:
    1020:	ff cf       	rjmp	.-2      	; 0x1020 <__stop_program>
